{"version":3,"file":"IsolateSerializer.production.js","sources":["../../src/errors/ErrorStrings.ts","../../src/Isolate/IsolateKeys.ts","../../src/Isolate/IsolateMutator.ts","../../src/exports/IsolateSerializer.ts"],"sourcesContent":["export enum ErrorStrings {\n  NO_ACTIVE_ISOLATE = 'Not within an active isolate',\n  UNABLE_TO_PICK_NEXT_ISOLATE = 'Unable to pick next isolate. This is a bug, please report it to the Vest maintainers.',\n  ENCOUNTERED_THE_SAME_KEY_TWICE = `Encountered the same key \"{key}\" twice. This may lead to inconsistent or overriding of results.`,\n  INVALID_ISOLATE_CANNOT_PARSE = `Invalid isolate was passed to IsolateSerializer. Cannot proceed.`,\n}\n","export enum IsolateKeys {\n  Type = '$type',\n  Keys = 'keys',\n  Key = 'key',\n  Parent = 'parent',\n  Data = 'data',\n  AllowReorder = 'allowReorder',\n  Status = 'status',\n  AbortController = 'abortController',\n  Children = 'children',\n}\n\nexport const ExcludedFromDump = new Set([\n  IsolateKeys.AbortController,\n  IsolateKeys.Parent,\n  IsolateKeys.Keys,\n]);\n","import { Nullable, invariant, isNullish } from 'vest-utils';\n\nimport { TIsolate } from 'Isolate';\n\nexport class IsolateMutator {\n  static setParent(isolate: TIsolate, parent: Nullable<TIsolate>): TIsolate {\n    isolate.parent = parent;\n    return isolate;\n  }\n\n  static saveOutput(isolate: TIsolate, output: any): TIsolate {\n    isolate.output = output;\n    return isolate;\n  }\n\n  static setKey(isolate: TIsolate, key: Nullable<string>): TIsolate {\n    isolate.key = key;\n    return isolate;\n  }\n\n  static addChild(isolate: TIsolate, child: TIsolate): void {\n    invariant(isolate);\n\n    isolate.children = isolate.children ?? [];\n\n    isolate.children.push(child);\n    IsolateMutator.setParent(child, isolate);\n  }\n\n  static removeChild(isolate: TIsolate, node: TIsolate): void {\n    isolate.children =\n      isolate.children?.filter(child => child !== node) ?? null;\n  }\n\n  static addChildKey(isolate: TIsolate, key: string, node: TIsolate): void {\n    invariant(isolate);\n\n    isolate.keys = isolate.keys ?? {};\n\n    isolate.keys[key] = node;\n  }\n\n  static slice(isolate: TIsolate, at: number): void {\n    if (isNullish(isolate.children)) {\n      return;\n    }\n    isolate.children.length = at;\n  }\n\n  static setData(isolate: TIsolate, data: any): void {\n    isolate.data = data;\n  }\n\n  static abort(isolate: TIsolate, reason?: string): void {\n    if (isNullish(isolate.abortController)) {\n      return;\n    }\n    isolate.abortController.abort(reason);\n  }\n}\n","import { ErrorStrings } from 'ErrorStrings';\nimport {\n  Nullable,\n  hasOwnProperty,\n  invariant,\n  isNullish,\n  isStringValue,\n  text,\n} from 'vest-utils';\nimport { expandObject, minifyObject } from 'vest-utils/minifyObject';\n\nimport { TIsolate } from 'Isolate';\nimport { ExcludedFromDump, IsolateKeys } from 'IsolateKeys';\nimport { IsolateMutator } from 'IsolateMutator';\n\nexport class IsolateSerializer {\n  // eslint-disable-next-line max-statements, complexity, max-lines-per-function\n  static deserialize(node: Record<string, any> | TIsolate | string): TIsolate {\n    // Validate the root object\n    const root = (\n      isStringValue(node) ? JSON.parse(node) : ({ ...node } as TIsolate)\n    ) as [any, any];\n\n    const expanded = expandObject(...root);\n\n    IsolateSerializer.validateIsolate(expanded);\n\n    const queue = [expanded];\n\n    // Iterate over the queue until it's empty\n    while (queue.length) {\n      // Get the next item from the queue\n      const current = queue.shift();\n\n      if (!current) {\n        continue;\n      }\n\n      const children = current.children;\n\n      // If there are no children, nothing to do.\n      if (!children) {\n        continue;\n      }\n\n      // Copy the children and set their parent to the current node.\n      current.children = children.map(child => {\n        const nextChild = { ...child };\n\n        IsolateMutator.setParent(nextChild, current);\n        queue.push(nextChild);\n\n        // If the child has a key, add it to the parent's keys.\n        const key = nextChild.key;\n\n        if (key) {\n          current.keys = current.keys ?? {};\n          current.keys[key] = nextChild;\n        }\n\n        return nextChild;\n      });\n    }\n\n    return expanded;\n  }\n\n  static serialize(isolate: Nullable<TIsolate>): string {\n    if (isNullish(isolate)) {\n      return '';\n    }\n\n    const minified = minifyObject(isolate, ExcludedFromDump);\n\n    return JSON.stringify(minified);\n  }\n\n  static validateIsolate(\n    node: Record<string, any> | TIsolate,\n  ): asserts node is TIsolate {\n    invariant(\n      hasOwnProperty(node, IsolateKeys.Type),\n      text(ErrorStrings.INVALID_ISOLATE_CANNOT_PARSE),\n    );\n  }\n}\n"],"names":["ErrorStrings","IsolateKeys","ExcludedFromDump","Set","AbortController","Parent","Keys","IsolateMutator","static","isolate","parent","output","key","child","invariant","children","_a","push","setParent","node","_b","filter","keys","at","isNullish","length","data","reason","abortController","abort","IsolateSerializer","root","isStringValue","JSON","parse","Object","assign","expanded","expandObject","validateIsolate","queue","current","shift","map","nextChild","minified","minifyObject","stringify","hasOwnProperty","Type","text","INVALID_ISOLATE_CANNOT_PARSE"],"mappings":"iBAAYA,ECAAC,gEDAZ,SAAYD,GACVA,EAAA,kBAAA,+BACAA,EAAA,4BAAA,wFACAA,EAAA,+BAAA,kGACAA,EAAA,6BAAA,kEACD,CALD,CAAYA,IAAAA,EAKX,CAAA,ICLD,SAAYC,GACVA,EAAA,KAAA,QACAA,EAAA,KAAA,OACAA,EAAA,IAAA,MACAA,EAAA,OAAA,SACAA,EAAA,KAAA,OACAA,EAAA,aAAA,eACAA,EAAA,OAAA,SACAA,EAAA,gBAAA,kBACAA,EAAA,SAAA,UACD,CAVD,CAAYA,IAAAA,EAUX,CAAA,IAEM,MAAMC,EAAmB,IAAIC,IAAI,CACtCF,EAAYG,gBACZH,EAAYI,OACZJ,EAAYK,aCXDC,EACXC,iBAAiBC,EAAmBC,GAElC,OADAD,EAAQC,OAASA,EACVD,CACR,CAEDD,kBAAkBC,EAAmBE,GAEnC,OADAF,EAAQE,OAASA,EACVF,CACR,CAEDD,cAAcC,EAAmBG,GAE/B,OADAH,EAAQG,IAAMA,EACPH,CACR,CAEDD,gBAAgBC,EAAmBI,SACjCC,EAASA,UAACL,GAEVA,EAAQM,SAA+B,QAApBC,EAAAP,EAAQM,gBAAY,IAAAC,EAAAA,EAAA,GAEvCP,EAAQM,SAASE,KAAKJ,GACtBN,EAAeW,UAAUL,EAAOJ,EACjC,CAEDD,mBAAmBC,EAAmBU,WACpCV,EAAQM,SAC2C,QAAjDK,EAAgB,UAAhBX,EAAQM,gBAAQ,IAAAC,OAAA,EAAAA,EAAEK,QAAOR,GAASA,IAAUM,WAAK,IAAAC,EAAAA,EAAI,IACxD,CAEDZ,mBAAmBC,EAAmBG,EAAaO,SACjDL,EAASA,UAACL,GAEVA,EAAQa,KAAuB,QAAhBN,EAAAP,EAAQa,YAAQ,IAAAN,EAAAA,EAAA,CAAA,EAE/BP,EAAQa,KAAKV,GAAOO,CACrB,CAEDX,aAAaC,EAAmBc,GAC1BC,EAASA,UAACf,EAAQM,YAGtBN,EAAQM,SAASU,OAASF,EAC3B,CAEDf,eAAeC,EAAmBiB,GAChCjB,EAAQiB,KAAOA,CAChB,CAEDlB,aAAaC,EAAmBkB,GAC1BH,EAASA,UAACf,EAAQmB,kBAGtBnB,EAAQmB,gBAAgBC,MAAMF,EAC/B,QC3CUG,EAEXtB,mBAAmBW,GAEjB,MAAMY,EACJC,EAAaA,cAACb,GAAQc,KAAKC,MAAMf,GAASgB,OAAKC,OAAA,GAAAjB,GAG3CkB,EAAWC,EAAAA,gBAAgBP,GAEjCD,EAAkBS,gBAAgBF,GAElC,MAAMG,EAAQ,CAACH,GAGf,KAAOG,EAAMf,QAAQ,CAEnB,MAAMgB,EAAUD,EAAME,QAEtB,IAAKD,EACH,SAGF,MAAM1B,EAAW0B,EAAQ1B,SAGpBA,IAKL0B,EAAQ1B,SAAWA,EAAS4B,KAAI9B,UAC9B,MAAM+B,EAAST,OAAAC,OAAA,CAAA,EAAQvB,GAEvBN,EAAeW,UAAU0B,EAAWH,GACpCD,EAAMvB,KAAK2B,GAGX,MAAMhC,EAAMgC,EAAUhC,IAOtB,OALIA,IACF6B,EAAQnB,KAAuB,QAAhBN,EAAAyB,EAAQnB,YAAQ,IAAAN,EAAAA,EAAA,CAAA,EAC/ByB,EAAQnB,KAAKV,GAAOgC,GAGfA,CAAS,IAEnB,CAED,OAAOP,CACR,CAED7B,iBAAiBC,GACf,GAAIe,EAAAA,UAAUf,GACZ,MAAO,GAGT,MAAMoC,EAAWC,EAAAA,aAAarC,EAASP,GAEvC,OAAO+B,KAAKc,UAAUF,EACvB,CAEDrC,uBACEW,GAEAL,YACEkC,EAAAA,eAAe7B,EAAMlB,EAAYgD,MACjCC,OAAKlD,EAAamD,8BAErB"}