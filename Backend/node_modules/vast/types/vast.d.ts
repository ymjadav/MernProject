import { CB, DynamicValue, Maybe } from 'vest-utils';
declare function createState(onStateChange?: (...args: unknown[]) => unknown): CreateStateReturn;
type StateInput<S> = DynamicValue<S, [prevState?: S]>;
type SetStateInput<S> = DynamicValue<S, [prevState: S]>;
type State = CreateStateReturn;
type StateHandlerReturn<S> = [S, (nextState: SetStateInput<S>) => void];
type UseState<S> = CB<StateHandlerReturn<S>>;
type CreateStateReturn = {
    reset: () => void;
    registerStateKey: <S>(initialState?: Maybe<StateInput<S>>, onUpdate?: () => void) => CB<StateHandlerReturn<S>>;
};
export { createState, State, StateHandlerReturn, UseState };
//# sourceMappingURL=vast.d.ts.map