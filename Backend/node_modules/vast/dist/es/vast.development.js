import { optionalFunctionValue, isFunction } from 'vest-utils';

// eslint-disable-next-line max-lines-per-function
function createState(onStateChange) {
    const state = {
        references: [],
    };
    const registrations = [];
    return {
        registerStateKey,
        reset,
    };
    /**
     * Registers a new key in the state, takes the initial value (may be a function that returns the initial value), returns a function.
     *
     * @example
     *
     * const useColor = state.registerStateKey("blue");
     *
     * let [color, setColor] = useColor(); // -> ["blue", Function]
     *
     * setColor("green");
     *
     * useColor()[0]; -> "green"
     */
    function registerStateKey(initialState, onUpdate) {
        const key = registrations.length;
        registrations.push([initialState, onUpdate]);
        return initKey(key, initialState);
    }
    function reset() {
        const prev = current();
        state.references = [];
        registrations.forEach(([initialValue], index) => initKey(index, initialValue, prev[index]));
    }
    function initKey(key, initialState, prevState) {
        current().push();
        set(key, optionalFunctionValue(initialState, prevState));
        return function useStateKey() {
            return [
                current()[key],
                (nextState) => set(key, optionalFunctionValue(nextState, current()[key])),
            ];
        };
    }
    function current() {
        return state.references;
    }
    function set(index, value) {
        const prevValue = state.references[index];
        state.references[index] = value;
        const [, onUpdate] = registrations[index];
        if (isFunction(onUpdate)) {
            onUpdate(value, prevValue);
        }
        if (isFunction(onStateChange)) {
            onStateChange();
        }
    }
}

export { createState };
//# sourceMappingURL=vast.development.js.map
