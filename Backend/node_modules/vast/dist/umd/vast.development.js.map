{"version":3,"file":"vast.development.js","sources":["../../src/vast.ts"],"sourcesContent":["import {\n  CB,\n  DynamicValue,\n  Maybe,\n  isFunction,\n  optionalFunctionValue,\n} from 'vest-utils';\n\n// eslint-disable-next-line max-lines-per-function\nexport function createState(\n  onStateChange?: (...args: unknown[]) => unknown\n): CreateStateReturn {\n  const state: {\n    references: unknown[];\n  } = {\n    references: [],\n  };\n\n  const registrations: [\n    unknown,\n    (<S>(currentState: S, prevState: S) => void)?\n  ][] = [];\n\n  return {\n    registerStateKey,\n    reset,\n  };\n\n  /**\n   * Registers a new key in the state, takes the initial value (may be a function that returns the initial value), returns a function.\n   *\n   * @example\n   *\n   * const useColor = state.registerStateKey(\"blue\");\n   *\n   * let [color, setColor] = useColor(); // -> [\"blue\", Function]\n   *\n   * setColor(\"green\");\n   *\n   * useColor()[0]; -> \"green\"\n   */\n  function registerStateKey<S>(\n    initialState?: Maybe<StateInput<S>>,\n    onUpdate?: () => void\n  ): CB<StateHandlerReturn<S>> {\n    const key = registrations.length;\n    registrations.push([initialState, onUpdate]);\n    return initKey(key, initialState);\n  }\n\n  function reset(): void {\n    const prev = current();\n    state.references = [];\n    registrations.forEach(([initialValue], index) =>\n      initKey(index, initialValue, prev[index])\n    );\n  }\n\n  function initKey<S>(\n    key: number,\n    initialState?: Maybe<StateInput<S>>,\n    prevState?: Maybe<S>\n  ) {\n    current().push();\n    set(key, optionalFunctionValue(initialState, prevState));\n\n    return function useStateKey(): StateHandlerReturn<S> {\n      return [\n        current()[key],\n        (nextState: SetStateInput<S>) =>\n          set(key, optionalFunctionValue(nextState, current()[key])),\n      ];\n    };\n  }\n\n  function current(): any[] {\n    return state.references;\n  }\n\n  function set(index: number, value: unknown): void {\n    const prevValue = state.references[index];\n    state.references[index] = value;\n\n    const [, onUpdate] = registrations[index];\n\n    if (isFunction(onUpdate)) {\n      onUpdate(value, prevValue);\n    }\n\n    if (isFunction(onStateChange)) {\n      onStateChange();\n    }\n  }\n}\n\ntype StateInput<S> = DynamicValue<S, [prevState?: S]>;\ntype SetStateInput<S> = DynamicValue<S, [prevState: S]>;\n\nexport type State = CreateStateReturn;\nexport type StateHandlerReturn<S> = [S, (nextState: SetStateInput<S>) => void];\nexport type UseState<S> = CB<StateHandlerReturn<S>>;\n\ntype CreateStateReturn = {\n  reset: () => void;\n  registerStateKey: <S>(\n    initialState?: Maybe<StateInput<S>>,\n    onUpdate?: () => void\n  ) => CB<StateHandlerReturn<S>>;\n};\n"],"names":["optionalFunctionValue","isFunction"],"mappings":";;;;;;EAQA;EACM,SAAU,WAAW,CACzB,aAA+C,EAAA;EAE/C,IAAA,MAAM,KAAK,GAEP;EACF,QAAA,UAAU,EAAE,EAAE;OACf,CAAC;MAEF,MAAM,aAAa,GAGb,EAAE,CAAC;MAET,OAAO;UACL,gBAAgB;UAChB,KAAK;OACN,CAAC;EAEF;;;;;;;;;;;;EAYG;EACH,IAAA,SAAS,gBAAgB,CACvB,YAAmC,EACnC,QAAqB,EAAA;EAErB,QAAA,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC;UACjC,aAAa,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;EAC7C,QAAA,OAAO,OAAO,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;OACnC;EAED,IAAA,SAAS,KAAK,GAAA;EACZ,QAAA,MAAM,IAAI,GAAG,OAAO,EAAE,CAAC;EACvB,QAAA,KAAK,CAAC,UAAU,GAAG,EAAE,CAAC;UACtB,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,KAAK,KAC1C,OAAO,CAAC,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAC1C,CAAC;OACH;EAED,IAAA,SAAS,OAAO,CACd,GAAW,EACX,YAAmC,EACnC,SAAoB,EAAA;EAEpB,QAAA,OAAO,EAAE,CAAC,IAAI,EAAE,CAAC;UACjB,GAAG,CAAC,GAAG,EAAEA,+BAAqB,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,CAAC;EAEzD,QAAA,OAAO,SAAS,WAAW,GAAA;cACzB,OAAO;kBACL,OAAO,EAAE,CAAC,GAAG,CAAC;EACd,gBAAA,CAAC,SAA2B,KAC1B,GAAG,CAAC,GAAG,EAAEA,+BAAqB,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;eAC7D,CAAC;EACJ,SAAC,CAAC;OACH;EAED,IAAA,SAAS,OAAO,GAAA;UACd,OAAO,KAAK,CAAC,UAAU,CAAC;OACzB;EAED,IAAA,SAAS,GAAG,CAAC,KAAa,EAAE,KAAc,EAAA;UACxC,MAAM,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;EAC1C,QAAA,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;UAEhC,MAAM,GAAG,QAAQ,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;EAE1C,QAAA,IAAIC,oBAAU,CAAC,QAAQ,CAAC,EAAE;EACxB,YAAA,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;EAC5B,SAAA;EAED,QAAA,IAAIA,oBAAU,CAAC,aAAa,CAAC,EAAE;EAC7B,YAAA,aAAa,EAAE,CAAC;EACjB,SAAA;OACF;EACH;;;;;;;;"}