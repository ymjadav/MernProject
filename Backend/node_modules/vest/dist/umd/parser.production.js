!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("vest"),require("vest-utils")):"function"==typeof define&&define.amd?define(["exports","vest","vest-utils"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).parser={},e.vest,e["vest-utils"])}(this,(function(e,t,s){"use strict";var n;!function(e){e.HOOK_CALLED_OUTSIDE="hook called outside of a running suite.",e.EXPECTED_VEST_TEST="Expected value to be an instance of IsolateTest",e.FIELD_NAME_REQUIRED="Field name must be passed",e.SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION="Suite must be initialized with a function",e.PROMISIFY_REQUIRE_FUNCTION="Vest.Promisify must be called with a function",e.PARSER_EXPECT_RESULT_OBJECT="Vest parser: expected argument at position 0 to be Vest's result object.",e.WARN_MUST_BE_CALLED_FROM_TEST="Warn must be called from within the body of a test function",e.EACH_CALLBACK_MUST_BE_A_FUNCTION="Each must be called with a function",e.INVALID_PARAM_PASSED_TO_FUNCTION='Incompatible params passed to {fn_name} function. "{param}" must be of type {expected}',e.TESTS_CALLED_IN_DIFFERENT_ORDER='Vest Critical Error: Tests called in different order than previous run.\n    expected: {fieldName}\n    received: {prevName}\n    This can happen on one of two reasons:\n    1. You\'re using if/else statements to conditionally select tests. Instead, use "skipWhen".\n    2. You are iterating over a list of tests, and their order changed. Use "each" and a custom key prop so that Vest retains their state.',e.UNEXPECTED_TEST_REGISTRATION_ERROR="Unexpected error encountered during test registration.\n      Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.\n      Error: {error}.",e.UNEXPECTED_TEST_RUN_ERROR="Unexpected error encountered during test run. Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.",e.INCLUDE_SELF="Trying to call include.when on the same field."}(n||(n={})),e.parse=function(e){s.invariant(e&&s.hasOwnProperty(e,"valid"),n.PARSER_EXPECT_RESULT_OBJECT);const i=t.suiteSelectors(e),r={},o={invalid:i.hasErrors,pending:i.isPending,tested:function(t){if(s.isNullish(t))return s.isPositive(e.testCount);if(s.hasOwnProperty(r,t))return r[t];return a(t),o.tested(t)},untested:function(t){return!(s.isPositive(e.testCount)&&o.tested(t))},valid:i.isValid,warning:i.hasWarnings};return o;function a(t){r[t]=s.hasOwnProperty(e.tests,t)&&s.isPositive(e.tests[t].testCount)}}}));
//# sourceMappingURL=parser.production.js.map
