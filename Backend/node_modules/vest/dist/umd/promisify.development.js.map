{"version":3,"file":"promisify.development.js","sources":["../../src/errors/ErrorStrings.ts","../../src/exports/promisify.ts"],"sourcesContent":["export enum ErrorStrings {\n  HOOK_CALLED_OUTSIDE = 'hook called outside of a running suite.',\n  EXPECTED_VEST_TEST = 'Expected value to be an instance of IsolateTest',\n  FIELD_NAME_REQUIRED = 'Field name must be passed',\n  SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION = 'Suite must be initialized with a function',\n  PROMISIFY_REQUIRE_FUNCTION = 'Vest.Promisify must be called with a function',\n  PARSER_EXPECT_RESULT_OBJECT = \"Vest parser: expected argument at position 0 to be Vest's result object.\",\n  WARN_MUST_BE_CALLED_FROM_TEST = 'Warn must be called from within the body of a test function',\n  EACH_CALLBACK_MUST_BE_A_FUNCTION = 'Each must be called with a function',\n  INVALID_PARAM_PASSED_TO_FUNCTION = 'Incompatible params passed to {fn_name} function. \"{param}\" must be of type {expected}',\n  TESTS_CALLED_IN_DIFFERENT_ORDER = `Vest Critical Error: Tests called in different order than previous run.\n    expected: {fieldName}\n    received: {prevName}\n    This can happen on one of two reasons:\n    1. You're using if/else statements to conditionally select tests. Instead, use \"skipWhen\".\n    2. You are iterating over a list of tests, and their order changed. Use \"each\" and a custom key prop so that Vest retains their state.`,\n  UNEXPECTED_TEST_REGISTRATION_ERROR = `Unexpected error encountered during test registration.\n      Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.\n      Error: {error}.`,\n  UNEXPECTED_TEST_RUN_ERROR = `Unexpected error encountered during test run. Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.`,\n  INCLUDE_SELF = 'Trying to call include.when on the same field.',\n}\n","import { invariant, isFunction } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport {\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\nfunction promisify<F extends TFieldName, G extends TGroupName>(\n  validatorFn: (...args: any[]) => SuiteRunResult<F, G>\n) {\n  return (...args: any[]): Promise<SuiteResult<F, G>> => {\n    invariant(isFunction(validatorFn), ErrorStrings.PROMISIFY_REQUIRE_FUNCTION);\n\n    return new Promise(resolve => validatorFn(...args).done(resolve));\n  };\n}\n\nexport default promisify;\n"],"names":["invariant","isFunction"],"mappings":";;;;;;EAAA,IAAY,YAuBX,CAAA;EAvBD,CAAA,UAAY,YAAY,EAAA;EACtB,IAAA,YAAA,CAAA,qBAAA,CAAA,GAAA,yCAA+D,CAAA;EAC/D,IAAA,YAAA,CAAA,oBAAA,CAAA,GAAA,iDAAsE,CAAA;EACtE,IAAA,YAAA,CAAA,qBAAA,CAAA,GAAA,2BAAiD,CAAA;EACjD,IAAA,YAAA,CAAA,yCAAA,CAAA,GAAA,2CAAqF,CAAA;EACrF,IAAA,YAAA,CAAA,4BAAA,CAAA,GAAA,+CAA4E,CAAA;EAC5E,IAAA,YAAA,CAAA,6BAAA,CAAA,GAAA,0EAAwG,CAAA;EACxG,IAAA,YAAA,CAAA,+BAAA,CAAA,GAAA,6DAA6F,CAAA;EAC7F,IAAA,YAAA,CAAA,kCAAA,CAAA,GAAA,qCAAwE,CAAA;EACxE,IAAA,YAAA,CAAA,kCAAA,CAAA,GAAA,0FAA2H,CAAA;EAC3H,IAAA,YAAA,CAAA,iCAAA,CAAA,GAAA,0ZAKyI,CAAA;EACzI,IAAA,YAAA,CAAA,oCAAA,CAAA,GAAA,8KAGoB,CAAA;EACpB,IAAA,YAAA,CAAA,2BAAA,CAAA,GAAA,uIAC+B,CAAA;EAC/B,IAAA,YAAA,CAAA,cAAA,CAAA,GAAA,gDAA+D,CAAA;EACjE,CAAC,EAvBW,YAAY,KAAZ,YAAY,GAuBvB,EAAA,CAAA,CAAA;;ECbD,SAAS,SAAS,CAChB,WAAqD,EAAA;EAErD,IAAA,OAAO,CAAC,GAAG,IAAW,KAAgC;UACpDA,mBAAS,CAACC,oBAAU,CAAC,WAAW,CAAC,EAAE,YAAY,CAAC,0BAA0B,CAAC,CAAC;EAE5E,QAAA,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;EACpE,KAAC,CAAC;EACJ;;;;;;;;"}