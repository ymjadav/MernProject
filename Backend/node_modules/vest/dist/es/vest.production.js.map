{"version":3,"file":"vest.production.js","sources":["../../src/core/isolate/VestIsolateType.ts","../../src/core/isolate/IsolateSuite/IsolateSuite.ts","../../src/hooks/optional/OptionalTypes.ts","../../src/hooks/optional/Modes.ts","../../src/core/context/SuiteContext.ts","../../src/hooks/optional/optional.ts","../../src/errors/ErrorStrings.ts","../../src/core/StateMachines/CommonStateMachine.ts","../../src/core/StateMachines/IsolateTestStateMachine.ts","../../src/suiteResult/Severity.ts","../../src/hooks/focused/FocusedKeys.ts","../../src/core/isolate/VestIsolate.ts","../../src/core/isolate/IsolateTest/VestTest.ts","../../src/core/test/helpers/matchingFieldName.ts","../../src/core/isolate/IsolateTest/isSameProfileTest.ts","../../src/hooks/focused/focused.ts","../../src/core/Runtime.ts","../../src/suiteResult/selectors/collectFailures.ts","../../src/suiteResult/selectors/suiteSelectors.ts","../../src/suiteResult/SuiteResultTypes.ts","../../src/suiteResult/SummaryFailure.ts","../../src/core/isolate/IsolateTest/TestWalker.ts","../../src/suite/SuiteWalker.ts","../../src/core/test/helpers/matchingGroupName.ts","../../src/suiteResult/selectors/hasFailuresByTestObjects.ts","../../src/core/test/helpers/nonMatchingSeverityProfile.ts","../../src/suiteResult/selectors/shouldAddValidProperty.ts","../../src/suiteResult/selectors/useProduceSuiteSummary.ts","../../src/suiteResult/suiteResult.ts","../../src/isolates/skipWhen.ts","../../src/hooks/focused/useHasOnliedTests.ts","../../src/hooks/focused/useIsExcluded.ts","../../src/hooks/optional/mode.ts","../../src/isolates/omitWhen.ts","../../src/core/test/testLevelFlowControl/verifyTestRun.ts","../../src/core/isolate/IsolateTest/IsolateTestReconciler.ts","../../src/core/isolate/VestReconciler.ts","../../src/core/isolate/IsolateTest/cancelOverriddenPendingTest.ts","../../src/isolates/group.ts","../../src/hooks/include.ts","../../src/core/VestBus/BusEvents.ts","../../src/core/isolate/IsolateTest/IsolateTest.ts","../../src/core/test/testLevelFlowControl/runTest.ts","../../src/core/test/helpers/shouldUseErrorMessage.ts","../../src/core/test/test.ts","../../src/core/test/test.memo.ts","../../src/suite/getTypedMethods.ts","../../src/hooks/optional/omitOptionalFields.ts","../../src/core/VestBus/VestBus.ts","../../src/suite/runCallbacks.ts","../../src/suiteResult/suiteRunResult.ts","../../src/suiteResult/done/shouldSkipDoneRegistration.ts","../../src/suiteResult/done/deferDoneCallback.ts","../../src/suite/createSuite.ts","../../src/suite/validateParams/validateSuiteParams.ts","../../src/isolates/each.ts","../../src/core/isolate/IsolateEach/IsolateEach.ts","../../src/hooks/warn.ts"],"sourcesContent":["export const VestIsolateType = {\n  Each: 'Each',\n  Focused: 'Focused',\n  Group: 'Group',\n  OmitWhen: 'OmitWhen',\n  SkipWhen: 'SkipWhen',\n  Suite: 'Suite',\n  Test: 'Test',\n};\n","import { CB, assign } from 'vest-utils';\nimport { Isolate, TIsolate } from 'vestjs-runtime';\n\nimport { OptionalFieldDeclaration, OptionalFields } from 'OptionalTypes';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type TIsolateSuite = TIsolate<{\n  optional: OptionalFields;\n}>;\n\nexport function IsolateSuite<Callback extends CB = CB>(\n  callback: Callback,\n): TIsolateSuite {\n  return Isolate.create(VestIsolateType.Suite, callback, {\n    optional: {},\n  });\n}\n\nexport class SuiteOptionalFields {\n  static setOptionalField(\n    suite: TIsolateSuite,\n    fieldName: TFieldName,\n    setter: (current: OptionalFieldDeclaration) => OptionalFieldDeclaration,\n  ): void {\n    const current = suite.data.optional;\n    const currentField = current[fieldName];\n\n    assign(current, {\n      [fieldName]: assign({}, currentField, setter(currentField)),\n    });\n  }\n\n  static getOptionalField(\n    suite: TIsolateSuite,\n    fieldName: TFieldName,\n  ): OptionalFieldDeclaration {\n    return SuiteOptionalFields.getOptionalFields(suite)[fieldName] ?? {};\n  }\n\n  static getOptionalFields(suite: TIsolateSuite): OptionalFields {\n    return suite.data?.optional ?? {};\n  }\n}\n","import { DynamicValue, OneOrMoreOf } from 'vest-utils';\n\nimport { TFieldName } from 'SuiteResultTypes';\n\nexport type OptionalFields = Record<string, OptionalFieldDeclaration>;\n\nexport type OptionalsInput<F extends TFieldName> =\n  | OneOrMoreOf<F>\n  | OptionalsObject<F>;\n\ntype OptionalsObject<F extends TFieldName> = Record<F, TOptionalRule | any>;\n\ntype ImmediateOptionalFieldDeclaration = {\n  type: OptionalFieldTypes.CUSTOM_LOGIC;\n  rule: TOptionalRule;\n  applied: boolean;\n};\n\ntype DelayedOptionalFieldDeclaration = {\n  type: OptionalFieldTypes.AUTO;\n  applied: boolean;\n  rule: null;\n};\n\ntype TOptionalRule = DynamicValue<boolean>;\n\nexport type OptionalFieldDeclaration =\n  | ImmediateOptionalFieldDeclaration\n  | DelayedOptionalFieldDeclaration;\n\nexport enum OptionalFieldTypes {\n  CUSTOM_LOGIC,\n  AUTO,\n}\n","export enum Modes {\n  EAGER = 'EAGER',\n  ALL = 'ALL',\n  ONE = 'ONE',\n}\n","import { createCascade } from 'context';\nimport {\n  assign,\n  TinyState,\n  tinyState,\n  cache,\n  CacheApi,\n  DynamicValue,\n} from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { Modes } from 'Modes';\n\nexport const SuiteContext = createCascade<CTXType>((ctxRef, parentContext) => {\n  if (parentContext) {\n    return null;\n  }\n\n  return assign(\n    {\n      inclusion: {},\n      mode: tinyState.createTinyState<Modes>(Modes.EAGER),\n      suiteParams: [],\n      testMemoCache,\n    },\n    ctxRef\n  );\n});\n\ntype CTXType = {\n  inclusion: Record<string, DynamicValue<boolean>>;\n  mode: TinyState<Modes>;\n  suiteParams: any[];\n  testMemoCache: CacheApi<TIsolateTest>;\n  currentTest?: TIsolateTest;\n  groupName?: string;\n  skipped?: boolean;\n  omitted?: boolean;\n};\n\nexport function useCurrentTest(msg?: string) {\n  return SuiteContext.useX(msg).currentTest;\n}\n\nexport function useGroupName() {\n  return SuiteContext.useX().groupName;\n}\n\nexport function useInclusion() {\n  return SuiteContext.useX().inclusion;\n}\n\nexport function useMode() {\n  return SuiteContext.useX().mode();\n}\n\nexport function useSkipped() {\n  return SuiteContext.useX().skipped ?? false;\n}\n\nexport function useOmitted() {\n  return SuiteContext.useX().omitted ?? false;\n}\n\nconst testMemoCache = cache<TIsolateTest>(10);\n\nexport function useTestMemoCache() {\n  return SuiteContext.useX().testMemoCache;\n}\n\nexport function useSuiteParams() {\n  return SuiteContext.useX().suiteParams;\n}\n","import { enforce } from 'n4s';\nimport { isArray, isStringValue, asArray, hasOwnProperty } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { OptionalFieldTypes, OptionalsInput } from 'OptionalTypes';\nimport { useSuiteParams } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\n\n// @vx-allow use-use\nexport function optional<F extends TFieldName>(\n  optionals: OptionalsInput<F>\n): void {\n  const suiteRoot = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const suiteParams = useSuiteParams();\n  const dataObject = suiteParams?.[0] ?? {};\n\n  // There are two types of optional field declarations:\n\n  // 1 AUTO: Vest will automatically determine whether the field should be omitted\n  // Based on the current run. Vest will omit \"auto\" added fields without any\n  // configuration if their tests did not run at all in the suite, or if the data object\n  // contains a blank value for the field.\n  //\n  // 2 Custom logic: Vest will determine whether they should fail based on the custom\n  // logic supplied by the developer.\n  // If the developer supplies a function - when the function returns true, the field will be omitted.\n  // If the developer supplies a boolean - the field will be omitted if the value is true.\n  // If the developer supplies a value - the field will be omitted if the value is blank.\n\n  // AUTO case (field name)\n  if (isArray(optionals) || isStringValue(optionals)) {\n    asArray(optionals).forEach(optionalField => {\n      SuiteOptionalFields.setOptionalField(suiteRoot, optionalField, () => ({\n        type: OptionalFieldTypes.AUTO,\n        applied: hasOwnProperty(dataObject, optionalField)\n          ? enforce.isBlank().test(dataObject?.[optionalField])\n          : false,\n        rule: null,\n      }));\n    });\n  } else {\n    // CUSTOM_LOGIC case (function or boolean)\n    for (const field in optionals) {\n      const value = optionals[field];\n\n      SuiteOptionalFields.setOptionalField(suiteRoot, field, () => ({\n        type: OptionalFieldTypes.CUSTOM_LOGIC,\n        rule: value,\n        applied: enforce.isBlank().test(value) || value === true,\n      }));\n    }\n  }\n}\n\nexport function useIsOptionalFieldApplied(fieldName?: TFieldName) {\n  if (!fieldName) {\n    return false;\n  }\n\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  return (\n    SuiteOptionalFields.getOptionalField(root, fieldName)?.applied ?? false\n  );\n}\n","export enum ErrorStrings {\n  HOOK_CALLED_OUTSIDE = 'hook called outside of a running suite.',\n  EXPECTED_VEST_TEST = 'Expected value to be an instance of IsolateTest',\n  FIELD_NAME_REQUIRED = 'Field name must be passed',\n  SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION = 'Suite must be initialized with a function',\n  PROMISIFY_REQUIRE_FUNCTION = 'Vest.Promisify must be called with a function',\n  PARSER_EXPECT_RESULT_OBJECT = \"Vest parser: expected argument at position 0 to be Vest's result object.\",\n  WARN_MUST_BE_CALLED_FROM_TEST = 'Warn must be called from within the body of a test function',\n  EACH_CALLBACK_MUST_BE_A_FUNCTION = 'Each must be called with a function',\n  INVALID_PARAM_PASSED_TO_FUNCTION = 'Incompatible params passed to {fn_name} function. \"{param}\" must be of type {expected}',\n  TESTS_CALLED_IN_DIFFERENT_ORDER = `Vest Critical Error: Tests called in different order than previous run.\n    expected: {fieldName}\n    received: {prevName}\n    This can happen on one of two reasons:\n    1. You're using if/else statements to conditionally select tests. Instead, use \"skipWhen\".\n    2. You are iterating over a list of tests, and their order changed. Use \"each\" and a custom key prop so that Vest retains their state.`,\n  UNEXPECTED_TEST_REGISTRATION_ERROR = `Unexpected error encountered during test registration.\n      Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.\n      Error: {error}.`,\n  UNEXPECTED_TEST_RUN_ERROR = `Unexpected error encountered during test run. Please report this issue to Vest's Github repository.\n      Test Object: {testObject}.`,\n  INCLUDE_SELF = 'Trying to call include.when on the same field.',\n}\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\nimport { TIsolate } from 'vestjs-runtime';\n\nexport const CommonStates = {\n  PENDING: 'PENDING',\n  INITIAL: 'INITIAL',\n};\n\nconst State = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  [CommonStates.INITIAL]: CommonStates.INITIAL,\n  DONE: 'DONE',\n};\n\nexport type State = ValueOf<typeof State>;\n\nconst machine: TStateMachine<State> = {\n  initial: State.INITIAL,\n  states: {\n    [State.DONE]: {},\n    [State.INITIAL]: {\n      [State.PENDING]: State.PENDING,\n      [State.DONE]: State.DONE,\n    },\n    [State.PENDING]: {\n      [State.DONE]: State.DONE,\n    },\n  },\n};\n\nfunction transition(from: State | undefined, to: State) {\n  return CommonStateMachine.staticTransition(from ?? State.INITIAL, to);\n}\n\nexport function setDone(isolate: TIsolate) {\n  isolate.status = transition(isolate.status, State.DONE);\n}\n\nexport function setPending(isolate: TIsolate) {\n  isolate.status = transition(isolate.status, State.PENDING);\n}\n\nexport const CommonStateMachine = StateMachine<State>(machine);\n","import { StateMachine, TStateMachine, ValueOf } from 'vest-utils';\n\nimport { CommonStates } from 'CommonStateMachine';\n\nexport const TestStatus = {\n  [CommonStates.PENDING]: CommonStates.PENDING,\n  CANCELED: 'CANCELED',\n  FAILED: 'FAILED',\n  OMITTED: 'OMITTED',\n  PASSING: 'PASSING',\n  SKIPPED: 'SKIPPED',\n  UNTESTED: 'UNTESTED',\n  WARNING: 'WARNING',\n};\n\nexport const TestAction = {\n  RESET: 'RESET',\n};\n\nexport type TestStatus = ValueOf<typeof TestStatus>;\nexport type TestAction = ValueOf<typeof TestAction>;\n\nexport type TestStateMachineAction = TestAction | TestStatus;\n\nconst machine: TStateMachine<TestStatus, TestStateMachineAction> = {\n  initial: TestStatus.UNTESTED,\n  states: {\n    '*': {\n      [TestStatus.OMITTED]: TestStatus.OMITTED,\n      [TestAction.RESET]: TestStatus.UNTESTED,\n    },\n    [TestStatus.UNTESTED]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.PENDING]: TestStatus.PENDING,\n      [TestStatus.SKIPPED]: TestStatus.SKIPPED,\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.PENDING]: {\n      [TestStatus.CANCELED]: TestStatus.CANCELED,\n      [TestStatus.FAILED]: TestStatus.FAILED,\n\n      [TestStatus.PASSING]: TestStatus.PASSING,\n      [TestStatus.SKIPPED]: [\n        TestStatus.SKIPPED,\n        (force?: boolean) => force === true,\n      ],\n      [TestStatus.WARNING]: TestStatus.WARNING,\n    },\n    [TestStatus.SKIPPED]: {},\n    [TestStatus.FAILED]: {},\n    [TestStatus.WARNING]: {},\n    [TestStatus.PASSING]: {},\n    [TestStatus.CANCELED]: {},\n    [TestStatus.OMITTED]: {},\n  },\n};\n\nexport const IsolateTestStateMachine = StateMachine<\n  TestStatus,\n  TestStateMachineAction\n>(machine);\n","export enum Severity {\n  WARNINGS = 'warnings',\n  ERRORS = 'errors',\n}\n\nexport enum SeverityCount {\n  ERROR_COUNT = 'errorCount',\n  WARN_COUNT = 'warnCount',\n}\n\nexport function countKeyBySeverity(severity: Severity): SeverityCount {\n  return severity === Severity.ERRORS\n    ? SeverityCount.ERROR_COUNT\n    : SeverityCount.WARN_COUNT;\n}\n\nexport enum TestSeverity {\n  Error = 'error',\n  Warning = 'warning',\n}\n","export enum FocusModes {\n  ONLY,\n  SKIP,\n}\n","import { TStateMachineApi } from 'vest-utils';\nimport { TIsolate } from 'vestjs-runtime';\n\nimport { CommonStateMachine, CommonStates } from 'CommonStateMachine';\n\nexport class VestIsolate {\n  static stateMachine: TStateMachineApi = CommonStateMachine;\n\n  static getStatus(isolate: TIsolate): string {\n    return isolate.status ?? CommonStates.INITIAL;\n  }\n\n  static setStatus(isolate: TIsolate, status: string, payload?: any): void {\n    isolate.status = this.stateMachine.staticTransition(\n      VestIsolate.getStatus(isolate),\n      status,\n      payload,\n    );\n  }\n\n  static statusEquals(isolate: TIsolate, status: string): boolean {\n    return VestIsolate.getStatus(isolate) === status;\n  }\n\n  static setPending(isolate: TIsolate): void {\n    this.setStatus(isolate, CommonStates.PENDING);\n  }\n\n  static isPending(isolate: TIsolate): boolean {\n    return VestIsolate.statusEquals(isolate, CommonStates.PENDING);\n  }\n}\n","import { Maybe, invariant, isPromise, optionalFunctionValue } from 'vest-utils';\nimport { IsolateMutator, IsolateSelectors, TIsolate } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport type { TIsolateTest } from 'IsolateTest';\nimport {\n  IsolateTestStateMachine,\n  TestAction,\n  TestStatus,\n} from 'IsolateTestStateMachine';\nimport { TestSeverity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolate } from 'VestIsolate';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport class VestTest extends VestIsolate {\n  static stateMachine = IsolateTestStateMachine;\n\n  // Read\n\n  static getData<\n    F extends TFieldName = TFieldName,\n    G extends TGroupName = TGroupName\n  >(test: TIsolateTest<F, G>) {\n    invariant(test.data);\n    return test.data;\n  }\n\n  static is(isolate?: Maybe<TIsolate>): isolate is TIsolateTest {\n    return IsolateSelectors.isIsolateType<TIsolateTest>(\n      isolate,\n      VestIsolateType.Test\n    );\n  }\n\n  static isX(isolate?: Maybe<TIsolate>): asserts isolate is TIsolateTest {\n    invariant(VestTest.is(isolate), ErrorStrings.EXPECTED_VEST_TEST);\n  }\n\n  static cast<F extends TFieldName = string, G extends TGroupName = string>(\n    isolate?: Maybe<TIsolate>\n  ): TIsolateTest<F, G> {\n    VestTest.isX(isolate);\n    return isolate as TIsolateTest<F, G>;\n  }\n\n  static warns(test: TIsolateTest): boolean {\n    return VestTest.getData(test).severity === TestSeverity.Warning;\n  }\n\n  static isOmitted(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.OMITTED);\n  }\n\n  static isUntested(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.UNTESTED);\n  }\n\n  static isFailing(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.FAILED);\n  }\n\n  static isCanceled(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.CANCELED);\n  }\n\n  static isSkipped(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.SKIPPED);\n  }\n\n  static isPassing(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.PASSING);\n  }\n\n  static isWarning(test: TIsolateTest): boolean {\n    return VestTest.statusEquals(test, TestStatus.WARNING);\n  }\n\n  static hasFailures(test: TIsolateTest): boolean {\n    return VestTest.isFailing(test) || VestTest.isWarning(test);\n  }\n\n  static isNonActionable(test: TIsolateTest): boolean {\n    return (\n      VestTest.isSkipped(test) ||\n      VestTest.isOmitted(test) ||\n      VestTest.isCanceled(test)\n    );\n  }\n\n  static isTested(test: TIsolateTest): boolean {\n    return VestTest.hasFailures(test) || VestTest.isPassing(test);\n  }\n\n  static awaitsResolution(test: TIsolateTest): boolean {\n    // Is the test in a state where it can still be run, or complete running\n    // and its final status is indeterminate?\n    return (\n      VestTest.isSkipped(test) ||\n      VestTest.isUntested(test) ||\n      VestTest.isPending(test)\n    );\n  }\n\n  static isAsyncTest(test: TIsolateTest): boolean {\n    return isPromise(VestTest.getData(test).asyncTest);\n  }\n\n  // Mutate\n\n  // static setPending(test: TIsolateTest) {\n  //   this.setStatus(test, TestStatus.PENDING);\n  // }\n\n  static fail(test: TIsolateTest): void {\n    VestTest.setStatus(\n      test,\n      VestTest.warns(test) ? TestStatus.WARNING : TestStatus.FAILED\n    );\n  }\n\n  static pass(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.PASSING);\n  }\n\n  static warn(test: TIsolateTest): void {\n    VestTest.setData(test, current => ({\n      ...current,\n      severity: TestSeverity.Warning,\n    }));\n  }\n\n  static setData(\n    test: TIsolateTest,\n    setter:\n      | ((current: TIsolateTest['data']) => TIsolateTest['data'])\n      | TIsolateTest['data']\n  ): void {\n    test.data = optionalFunctionValue(setter, VestTest.getData(test));\n  }\n\n  static skip(test: TIsolateTest, force?: boolean): void {\n    // Without this force flag, the test will be marked as skipped even if it is pending.\n    // This means that it will not be counted in \"allIncomplete\" and its done callbacks\n    // will not be called, or will be called prematurely.\n    // What this mostly say is that when we have a pending test for one field, and we then\n    // start typing in a different field - the pending test will be canceled, which\n    // is usually an unwanted behavior.\n    // The only scenario in which we DO want to cancel the async test regardless\n    // is when we specifically skip a test with `skipWhen`, which is handled by the\n    // \"force\" boolean flag.\n    // I am not a fan of this flag, but it gets the job done.\n    VestTest.setStatus(test, TestStatus.SKIPPED, force);\n  }\n\n  static cancel(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.CANCELED);\n    IsolateMutator.abort(test, TestStatus.CANCELED);\n  }\n\n  static omit(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestStatus.OMITTED);\n  }\n\n  static reset(test: TIsolateTest): void {\n    VestTest.setStatus(test, TestAction.RESET);\n  }\n}\n","import { Maybe } from 'vest-utils';\n\nimport { TFieldName } from 'SuiteResultTypes';\nimport { WithFieldName } from 'TestTypes';\n\nexport function nonMatchingFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  return !!fieldName && !matchingFieldName(WithFieldName, fieldName);\n}\n\nexport default function matchingFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  return !!(fieldName && WithFieldName.fieldName === fieldName);\n}\n\nexport function matchesOrHasNoFieldName(\n  WithFieldName: WithFieldName<TFieldName>,\n  fieldName?: Maybe<TFieldName>,\n): boolean {\n  if (fieldName) {\n    return matchingFieldName(WithFieldName, fieldName);\n  }\n  return true;\n}\n","import { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport matchingFieldName from 'matchingFieldName';\n\nexport function isSameProfileTest(\n  testObject1: TIsolateTest,\n  testObject2: TIsolateTest,\n): boolean {\n  const { groupName: gn1 } = VestTest.getData(testObject1);\n  const { groupName: gn2, fieldName: fn2 } = VestTest.getData(testObject2);\n  return (\n    matchingFieldName(VestTest.getData(testObject1), fn2) &&\n    gn1 === gn2 &&\n    // Specifically using == here. The reason is that when serializing\n    // suite result, empty key gets removed, but it can also be null.\n    testObject1.key == testObject2.key\n  );\n}\n","import {\n  asArray,\n  Maybe,\n  OneOrMoreOf,\n  noop,\n  Nullable,\n  isNotEmpty,\n  isStringValue,\n} from 'vest-utils';\nimport { IsolateSelectors, TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { FocusModes } from 'FocusedKeys';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type ExclusionItem = Maybe<OneOrMoreOf<string>>;\nexport type FieldExclusion<F extends TFieldName> = Maybe<OneOrMoreOf<F>>;\nexport type GroupExclusion<G extends TGroupName> = Maybe<OneOrMoreOf<G>>;\n\nexport type TIsolateFocused = TIsolate<IsolateFocusedPayload>;\n\nexport type IsolateFocusedPayload = {\n  focusMode: FocusModes;\n  match: FieldExclusion<TFieldName>;\n  matchAll: boolean;\n};\n\nexport function IsolateFocused(\n  focusMode: FocusModes,\n  match?: true | FieldExclusion<TFieldName>\n): TIsolateFocused {\n  return Isolate.create(VestIsolateType.Focused, noop, {\n    focusMode,\n    match: asArray(match).filter(isStringValue),\n    matchAll: match === true,\n  });\n}\n\nexport class FocusSelectors {\n  static isSkipFocused(\n    focus: Nullable<TIsolateFocused>,\n    fieldName?: TFieldName\n  ): boolean {\n    return (\n      focus?.data.focusMode === FocusModes.SKIP &&\n      (hasFocus(focus, fieldName) || focus.data.matchAll === true)\n    );\n  }\n  static isOnlyFocused(\n    focus: Nullable<TIsolateFocused>,\n    fieldName?: TFieldName\n  ): boolean {\n    return (\n      focus?.data.focusMode === FocusModes.ONLY && hasFocus(focus, fieldName)\n    );\n  }\n\n  static isIsolateFocused(isolate: TIsolate): isolate is TIsolateFocused {\n    return IsolateSelectors.isIsolateType(isolate, VestIsolateType.Focused);\n  }\n}\n\n/**\n * Adds a field or a list of fields into the inclusion list\n *\n * @example\n *\n * only('username');\n */\n// @vx-allow use-use\nexport function only(match: FieldExclusion<TFieldName> | false) {\n  return IsolateFocused(FocusModes.ONLY, defaultMatch(match));\n}\n/**\n * Adds a field or a list of fields into the exclusion list\n *\n * @example\n *\n * skip('username');\n */\n// @vx-allow use-use\nexport function skip(match: FieldExclusion<TFieldName> | boolean) {\n  return IsolateFocused(FocusModes.SKIP, defaultMatch(match));\n}\n\nfunction defaultMatch(match: FieldExclusion<TFieldName> | boolean) {\n  return match === false ? [] : match;\n}\n\nfunction hasFocus(focus: Nullable<TIsolateFocused>, fieldName?: TFieldName) {\n  return (\n    isNotEmpty(focus?.data.match) &&\n    (fieldName ? focus?.data.match?.includes(fieldName) ?? true : true)\n  );\n}\n","import {\n  CB,\n  CacheApi,\n  Maybe,\n  TinyState,\n  cache,\n  seq,\n  tinyState,\n} from 'vest-utils';\nimport { IRecociler, VestRuntime } from 'vestjs-runtime';\n\nimport { TIsolateSuite } from 'IsolateSuite';\nimport {\n  SuiteName,\n  SuiteResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\nexport type DoneCallback = (res: SuiteResult<TFieldName, TGroupName>) => void;\ntype FieldCallbacks = Record<string, DoneCallbacks>;\ntype DoneCallbacks = Array<DoneCallback>;\n\ntype StateExtra = {\n  doneCallbacks: TinyState<DoneCallbacks>;\n  fieldCallbacks: TinyState<FieldCallbacks>;\n  suiteName: Maybe<string>;\n  suiteId: string;\n  suiteResultCache: CacheApi<SuiteResult<TFieldName, TGroupName>>;\n};\nconst suiteResultCache = cache<SuiteResult<TFieldName, TGroupName>>();\n\nexport function useCreateVestState({\n  suiteName,\n  VestReconciler,\n}: {\n  suiteName?: SuiteName;\n  VestReconciler: IRecociler;\n}) {\n  const stateRef: StateExtra = {\n    doneCallbacks: tinyState.createTinyState<DoneCallbacks>(() => []),\n    fieldCallbacks: tinyState.createTinyState<FieldCallbacks>(() => ({})),\n    suiteId: seq(),\n    suiteName,\n    suiteResultCache,\n  };\n\n  return VestRuntime.createRef(VestReconciler, stateRef);\n}\n\nfunction useX() {\n  return VestRuntime.useXAppData<StateExtra>();\n}\n\nexport function useDoneCallbacks() {\n  return useX().doneCallbacks();\n}\n\nexport function useFieldCallbacks() {\n  return useX().fieldCallbacks();\n}\n\nexport function useSuiteName() {\n  return useX().suiteName;\n}\n\nexport function useSuiteId() {\n  return useX().suiteId;\n}\n\nexport function useSuiteResultCache<F extends TFieldName, G extends TGroupName>(\n  action: CB<SuiteResult<F, G>>\n): SuiteResult<F, G> {\n  const suiteResultCache = useX().suiteResultCache;\n\n  return suiteResultCache([useSuiteId()], action) as SuiteResult<F, G>;\n}\n\nexport function useExpireSuiteResultCache() {\n  const suiteResultCache = useX().suiteResultCache;\n  suiteResultCache.invalidate([useSuiteId()]);\n}\n\nexport function useResetCallbacks() {\n  const [, , resetDoneCallbacks] = useDoneCallbacks();\n  const [, , resetFieldCallbacks] = useFieldCallbacks();\n\n  resetDoneCallbacks();\n  resetFieldCallbacks();\n}\n\nexport function useResetSuite() {\n  useResetCallbacks();\n  VestRuntime.reset();\n}\n\nexport function useLoadSuite(rootNode: TIsolateSuite): void {\n  VestRuntime.useLoadRootNode(rootNode);\n  useExpireSuiteResultCache();\n}\n","import { isPositive } from 'vest-utils';\n\nimport { countKeyBySeverity, Severity } from 'Severity';\nimport {\n  FailureMessages,\n  TestsContainer,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\n// calls collectAll or getByFieldName depending on whether fieldName is provided\n\nexport function gatherFailures(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity,\n  fieldName?: TFieldName\n): string[] | FailureMessages {\n  return fieldName\n    ? getByFieldName(testGroup, severityKey, fieldName)\n    : collectAll(testGroup, severityKey);\n}\n\nfunction getByFieldName(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity,\n  fieldName: TFieldName\n): string[] {\n  return testGroup?.[fieldName]?.[severityKey] || [];\n}\n\nfunction collectAll(\n  testGroup: TestsContainer<TFieldName, TGroupName>,\n  severityKey: Severity\n): FailureMessages {\n  const output: FailureMessages = {};\n\n  const countKey = countKeyBySeverity(severityKey);\n\n  for (const field in testGroup) {\n    if (isPositive(testGroup[field][countKey])) {\n      // We will probably never get to the fallback array\n      // leaving it just in case the implementation changes\n      output[field] = testGroup[field][severityKey] || [];\n    }\n  }\n\n  return output;\n}\n","import { Maybe, greaterThan, isPositive } from 'vest-utils';\n\nimport { Severity, SeverityCount } from 'Severity';\nimport {\n  FailureMessages,\n  GetFailuresResponse,\n  SuiteResult,\n  SuiteSummary,\n  TFieldName,\n  TGroupName,\n  TestsContainer,\n} from 'SuiteResultTypes';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { gatherFailures } from 'collectFailures';\nimport matchingFieldName from 'matchingFieldName';\n\nexport function bindSuiteSelectors<F extends TFieldName, G extends TGroupName>(\n  get: <F extends string, G extends string>() => SuiteResult<F, G>\n): SuiteSelectors<F, G> {\n  return {\n    getError: (...args: Parameters<SuiteSelectors<F, G>['getError']>) =>\n      get().getError(...args),\n    getErrors: (...args: Parameters<SuiteSelectors<F, G>['getErrors']>) =>\n      get().getErrors(...args),\n    getErrorsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['getErrorsByGroup']>\n    ) => get().getErrorsByGroup(...args),\n    getWarning: (...args: Parameters<SuiteSelectors<F, G>['getWarning']>) =>\n      get().getWarning(...args),\n    getWarnings: (...args: Parameters<SuiteSelectors<F, G>['getWarnings']>) =>\n      get().getWarnings(...args),\n    getWarningsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['getWarningsByGroup']>\n    ) => get().getWarningsByGroup(...args),\n    hasErrors: (...args: Parameters<SuiteSelectors<F, G>['hasErrors']>) =>\n      get().hasErrors(...args),\n    hasErrorsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['hasErrorsByGroup']>\n    ) => get().hasErrorsByGroup(...args),\n    hasWarnings: (...args: Parameters<SuiteSelectors<F, G>['hasWarnings']>) =>\n      get().hasWarnings(...args),\n    hasWarningsByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['hasWarningsByGroup']>\n    ) => get().hasWarningsByGroup(...args),\n    isPending: (...args: Parameters<SuiteSelectors<F, G>['isPending']>) => {\n      return get().isPending(...args);\n    },\n    isTested: (...args: Parameters<SuiteSelectors<F, G>['isTested']>) =>\n      get().isTested(...args),\n    isValid: (...args: Parameters<SuiteSelectors<F, G>['isValid']>) =>\n      get().isValid(...args),\n    isValidByGroup: (\n      ...args: Parameters<SuiteSelectors<F, G>['isValidByGroup']>\n    ) => get().isValidByGroup(...args),\n  } as SuiteSelectors<F, G>;\n}\n\n// eslint-disable-next-line max-lines-per-function, max-statements\nexport function suiteSelectors<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>\n): SuiteSelectors<F, G> {\n  const selectors = {\n    getError,\n    getErrors,\n    getErrorsByGroup,\n    getWarning,\n    getWarnings,\n    getWarningsByGroup,\n    hasErrors,\n    hasErrorsByGroup,\n    hasWarnings,\n    hasWarningsByGroup,\n    isPending,\n    isTested,\n    isValid,\n    isValidByGroup,\n  };\n\n  return selectors;\n\n  // Booleans\n\n  function isValid(fieldName?: F): boolean {\n    return fieldName ? Boolean(summary.tests[fieldName]?.valid) : summary.valid;\n  }\n\n  function isValidByGroup(groupName: G, fieldName?: F): boolean {\n    const group = summary.groups[groupName];\n\n    if (!group) {\n      return false;\n    }\n\n    if (fieldName) {\n      return isFieldValid(group, fieldName);\n    }\n    for (const fieldName in group) {\n      if (!isFieldValid(group, fieldName)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function hasWarnings(fieldName?: F): boolean {\n    return hasFailures(summary, SeverityCount.WARN_COUNT, fieldName);\n  }\n\n  function hasErrors(fieldName?: F): boolean {\n    return hasFailures(summary, SeverityCount.ERROR_COUNT, fieldName);\n  }\n\n  function isTested(fieldName: F): boolean {\n    return isPositive(summary.tests[fieldName]?.testCount);\n  }\n\n  function hasWarningsByGroup<G extends TGroupName>(\n    groupName: G,\n    fieldName?: F\n  ): boolean {\n    return hasFailuresByGroup(\n      summary,\n      SeverityCount.WARN_COUNT,\n      groupName,\n      fieldName\n    );\n  }\n\n  function hasErrorsByGroup<G extends TGroupName>(\n    groupName: G,\n    fieldName?: F\n  ): boolean {\n    return hasFailuresByGroup(\n      summary,\n      SeverityCount.ERROR_COUNT,\n      groupName,\n      fieldName\n    );\n  }\n\n  // Responses\n\n  function getWarnings(): FailureMessages;\n  function getWarnings(fieldName: F): string[];\n  function getWarnings(fieldName?: F): GetFailuresResponse {\n    return getFailures(summary, Severity.WARNINGS, fieldName);\n  }\n\n  function getWarning(): Maybe<SummaryFailure<F, G>>;\n  function getWarning(fieldName: F): Maybe<string>;\n  function getWarning(fieldName?: F): Maybe<SummaryFailure<F, G> | string> {\n    return getFailure<F, G>(Severity.WARNINGS, summary, fieldName as F);\n  }\n\n  function getErrors(): FailureMessages;\n  function getErrors(fieldName: F): string[];\n  function getErrors(fieldName?: F): GetFailuresResponse {\n    return getFailures(summary, Severity.ERRORS, fieldName);\n  }\n\n  function getError(): Maybe<SummaryFailure<F, G>>;\n  function getError(fieldName: F): Maybe<string>;\n  function getError(fieldName?: F): Maybe<SummaryFailure<F, G> | string> {\n    return getFailure<F, G>(Severity.ERRORS, summary, fieldName as F);\n  }\n\n  function getErrorsByGroup(groupName: G): FailureMessages;\n  function getErrorsByGroup(groupName: G, fieldName: F): string[];\n  function getErrorsByGroup(groupName: G, fieldName?: F): GetFailuresResponse {\n    return getFailuresByGroup(summary, Severity.ERRORS, groupName, fieldName);\n  }\n\n  function getWarningsByGroup(groupName: G): FailureMessages;\n  function getWarningsByGroup(groupName: G, fieldName: F): string[];\n  function getWarningsByGroup(\n    groupName: G,\n    fieldName?: F\n  ): GetFailuresResponse {\n    return getFailuresByGroup(summary, Severity.WARNINGS, groupName, fieldName);\n  }\n\n  function isPending(fieldName?: F): boolean {\n    return fieldName\n      ? greaterThan(summary.tests[fieldName]?.pendingCount, 0)\n      : greaterThan(summary.pendingCount, 0);\n  }\n}\n\nexport interface SuiteSelectors<F extends TFieldName, G extends TGroupName> {\n  getWarning(): SummaryFailure<F, G> | undefined;\n  getWarning(fieldName: F): string | undefined;\n  getWarning(fieldName?: F): SummaryFailure<F, G> | string | undefined;\n  getError(): SummaryFailure<F, G> | undefined;\n  getError(fieldName: F): string | undefined;\n  getError(fieldName?: F): SummaryFailure<F, G> | string | undefined;\n  getErrors(): FailureMessages;\n  getErrors(fieldName: F): string[];\n  getErrors(fieldName?: F): string[] | FailureMessages;\n  getWarnings(): FailureMessages;\n  getWarnings(fieldName: F): string[];\n  getWarnings(fieldName?: F): string[] | FailureMessages;\n  getErrorsByGroup(groupName: G): FailureMessages;\n  getErrorsByGroup(groupName: G, fieldName: F): string[];\n  getErrorsByGroup(groupName: G, fieldName?: F): string[] | FailureMessages;\n  getWarningsByGroup(groupName: G): FailureMessages;\n  getWarningsByGroup(groupName: G, fieldName: F): string[];\n  getWarningsByGroup(groupName: G, fieldName?: F): string[] | FailureMessages;\n  hasErrors(fieldName?: F): boolean;\n  hasWarnings(fieldName?: F): boolean;\n  hasErrorsByGroup(groupName: G, fieldName?: F): boolean;\n  hasWarningsByGroup(groupName: G, fieldName?: F): boolean;\n  isTested(fieldName: F): boolean;\n  isPending(fieldName?: F): boolean;\n  isValid(fieldName?: F): boolean;\n  isValidByGroup(groupName: G, fieldName?: F): boolean;\n}\n\n// Gathers all failures of a given severity\n// With a fieldName, it will only gather failures for that field\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity\n): FailureMessages;\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity,\n  fieldName?: TFieldName\n): string[];\nfunction getFailures<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n  severityKey: Severity,\n  fieldName?: TFieldName\n): GetFailuresResponse {\n  return gatherFailures(summary.tests, severityKey, fieldName);\n}\n\n// Gathers all failures of a given severity within a group\n// With a fieldName, it will only gather failures for that field\nfunction getFailuresByGroup(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  severityKey: Severity,\n  groupName: TGroupName,\n  fieldName?: TFieldName\n): GetFailuresResponse {\n  return gatherFailures(summary.groups[groupName], severityKey, fieldName);\n}\n// Checks if a field is valid within a container object - can be within a group or top level\nfunction isFieldValid(\n  testContainer: TestsContainer<TFieldName, TGroupName>,\n  fieldName: TFieldName\n): boolean {\n  return !!testContainer[fieldName]?.valid;\n}\n\n// Checks if a there are any failures of a given severity within a group\n// If a fieldName is provided, it will only check for failures within that field\nfunction hasFailuresByGroup(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  severityCount: SeverityCount,\n  groupName: TGroupName,\n  fieldName?: TFieldName\n): boolean {\n  const group = summary.groups[groupName];\n\n  if (!group) {\n    return false;\n  }\n\n  if (fieldName) {\n    return isPositive(group[fieldName]?.[severityCount]);\n  }\n\n  for (const field in group) {\n    if (isPositive(group[field]?.[severityCount])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// Checks if there are any failures of a given severity\n// If a fieldName is provided, it will only check for failures within that field\nfunction hasFailures(\n  summary: SuiteSummary<TFieldName, TGroupName>,\n  countKey: SeverityCount,\n  fieldName?: TFieldName\n): boolean {\n  const failureCount = fieldName\n    ? summary.tests[fieldName]?.[countKey]\n    : summary[countKey] || 0;\n\n  return isPositive(failureCount);\n}\n\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>\n): Maybe<SummaryFailure<F, G>>;\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>,\n  fieldName: F\n): Maybe<string>;\nfunction getFailure<F extends TFieldName, G extends TGroupName>(\n  severity: Severity,\n  summary: SuiteSummary<F, G>,\n  fieldName?: F\n): Maybe<SummaryFailure<F, G> | string> {\n  const summaryKey = summary[severity];\n\n  if (!fieldName) {\n    return summaryKey[0];\n  }\n\n  return summaryKey.find(\n    (summaryFailure: SummaryFailure<TFieldName, TGroupName>) =>\n      matchingFieldName(summaryFailure, fieldName)\n  )?.message;\n}\n","import { Maybe } from 'vest-utils';\n\nimport { Severity } from 'Severity';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { Done } from 'suiteRunResult';\nimport { SuiteSelectors } from 'suiteSelectors';\n\nexport class SummaryBase {\n  public errorCount = 0;\n  public warnCount = 0;\n  public testCount = 0;\n  public pendingCount = 0;\n}\n\nexport class SuiteSummary<\n  F extends TFieldName,\n  G extends TGroupName\n> extends SummaryBase {\n  public [Severity.ERRORS]: SummaryFailure<F, G>[] = [];\n  public [Severity.WARNINGS]: SummaryFailure<F, G>[] = [];\n  public groups: Groups<G, F> = {} as Groups<G, F>;\n  public tests: Tests<F> = {} as Tests<F>;\n  public valid = false;\n}\n\nexport type TestsContainer<F extends TFieldName, G extends TGroupName> =\n  | Group<G>\n  | Tests<F>;\nexport type GroupTestSummary = SingleTestSummary;\n\nexport type Groups<G extends TGroupName, F extends TFieldName> = Record<\n  G,\n  Group<F>\n>;\nexport type Group<F extends TFieldName> = Record<F, GroupTestSummary>;\nexport type Tests<F extends TFieldName> = Record<F, SingleTestSummary>;\n\nexport type SingleTestSummary = SummaryBase & {\n  errors: string[];\n  warnings: string[];\n  valid: boolean;\n  pendingCount: number;\n};\n\nexport type GetFailuresResponse = FailureMessages | string[];\n\nexport type FailureMessages = Record<string, string[]>;\n\nexport type SuiteResult<\n  F extends TFieldName,\n  G extends TGroupName\n> = SuiteSummary<F, G> & SuiteSelectors<F, G> & { suiteName: SuiteName };\n\nexport type SuiteRunResult<\n  F extends TFieldName,\n  G extends TGroupName\n> = SuiteResult<F, G> & {\n  done: Done<F, G>;\n};\n\nexport type SuiteName = Maybe<string>;\n\nexport type TFieldName<T extends string = string> = T;\nexport type TGroupName<G extends string = string> = G;\n","import { TIsolateTest } from 'IsolateTest';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { WithFieldName } from 'TestTypes';\nimport { VestTest } from 'VestTest';\n\nexport class SummaryFailure<F extends TFieldName, G extends TGroupName>\n  implements WithFieldName<F>\n{\n  constructor(\n    public fieldName: F,\n    public message: string | undefined,\n    public groupName: G | undefined\n  ) {}\n\n  static fromTestObject<F extends TFieldName, G extends TGroupName>(\n    testObject: TIsolateTest<F, G>\n  ) {\n    const { fieldName, message, groupName } = VestTest.getData(testObject);\n\n    return new SummaryFailure(fieldName, message, groupName);\n  }\n}\n","import { Nullable } from 'vest-utils';\nimport { Walker, VestRuntime, TIsolate } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\nimport matchingFieldName from 'matchingFieldName';\n\ntype MaybeRoot = Nullable<TIsolate>;\n\nexport class TestWalker {\n  static defaultRoot = VestRuntime.useAvailableRoot;\n\n  static hasNoTests(root: MaybeRoot = TestWalker.defaultRoot()): boolean {\n    if (!root) return true;\n    return !Walker.has(root, VestTest.is);\n  }\n\n  static someTests(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot()\n  ): boolean {\n    if (!root) return false;\n    return Walker.some(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is\n    );\n  }\n\n  static everyTest(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot()\n  ): boolean {\n    if (!root) return false;\n    return Walker.every(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is\n    );\n  }\n\n  static walkTests<F extends TFieldName, G extends TGroupName>(\n    callback: (test: TIsolateTest<F, G>, breakout: () => void) => void,\n    root: MaybeRoot = TestWalker.defaultRoot()\n  ): void {\n    if (!root) return;\n    Walker.walk(\n      root,\n      (isolate, breakout) => {\n        callback(VestTest.cast<F, G>(isolate), breakout);\n      },\n      VestTest.is\n    );\n  }\n\n  static pluckTests(\n    predicate: (test: TIsolateTest) => boolean,\n    root: MaybeRoot = TestWalker.defaultRoot()\n  ): void {\n    if (!root) return;\n    Walker.pluck(\n      root,\n      isolate => {\n        VestTest.isX(isolate);\n\n        return predicate(isolate);\n      },\n      VestTest.is\n    );\n  }\n\n  static resetField(fieldName: TFieldName): void {\n    TestWalker.walkTests(testObject => {\n      if (matchingFieldName(VestTest.getData(testObject), fieldName)) {\n        VestTest.reset(testObject);\n      }\n    }, TestWalker.defaultRoot());\n  }\n\n  static removeTestByFieldName(\n    fieldName: TFieldName,\n    root: MaybeRoot = TestWalker.defaultRoot()\n  ): void {\n    TestWalker.pluckTests(testObject => {\n      return matchingFieldName(VestTest.getData(testObject), fieldName);\n    }, root);\n  }\n}\n","import { Predicate, Predicates, isNullish } from 'vest-utils';\nimport { VestRuntime, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestIsolate } from 'VestIsolate';\nimport { VestTest } from 'VestTest';\nimport { matchesOrHasNoFieldName } from 'matchingFieldName';\n\nexport class SuiteWalker {\n  static defaultRoot = VestRuntime.useAvailableRoot;\n\n  static hasPending(predicate?: Predicate): boolean {\n    const root = SuiteWalker.defaultRoot();\n\n    if (!root) {\n      return false;\n    }\n\n    return Walker.some(\n      root,\n      Predicates.all(VestIsolate.isPending, predicate ?? true)\n    );\n  }\n\n  // Checks whether there are pending isolates in the tree.\n  // If a fieldname is provided, will only check tests with a matching fieldname.\n  static hasRemainingWithTestNameMatching(fieldName?: TFieldName): boolean {\n    return SuiteWalker.hasPending(\n      Predicates.any(\n        isNullish(fieldName),\n        Predicates.all(VestTest.is, (testObject: TIsolateTest) => {\n          return matchesOrHasNoFieldName(\n            VestTest.getData(testObject),\n            fieldName\n          );\n        })\n      )\n    );\n  }\n}\n","import { Maybe, bindNot } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TGroupName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\n\nexport const nonMatchingGroupName = bindNot(matchingGroupName);\n\nexport function matchingGroupName(\n  testObject: TIsolateTest,\n  groupName: Maybe<TGroupName>\n): boolean {\n  return VestTest.getData(testObject).groupName === groupName;\n}\n","\nimport { TIsolateTest } from 'IsolateTest';\nimport { Severity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport { nonMatchingFieldName } from 'matchingFieldName';\nimport { nonMatchingGroupName } from 'matchingGroupName';\nimport { nonMatchingSeverityProfile } from 'nonMatchingSeverityProfile';\n\n/**\n * The difference between this file and hasFailures is that hasFailures uses the static\n * summary object, while this one uses the actual validation state\n */\n\nexport function hasErrorsByTestObjects(fieldName?: TFieldName): boolean {\n  return hasFailuresByTestObjects(Severity.ERRORS, fieldName);\n}\n\nfunction hasFailuresByTestObjects(\n  severityKey: Severity,\n  fieldName?: TFieldName\n): boolean {\n  return TestWalker.someTests(testObject => {\n    return hasFailuresByTestObject(testObject, severityKey, fieldName);\n  });\n}\n\nexport function hasGroupFailuresByTestObjects(\n  severityKey: Severity,\n  groupName: TGroupName,\n  fieldName?: TFieldName\n): boolean {\n  return TestWalker.someTests(testObject => {\n    if (nonMatchingGroupName(testObject, groupName)) {\n      return false;\n    }\n\n    return hasFailuresByTestObject(testObject, severityKey, fieldName);\n  });\n}\n\n/**\n * Determines whether a certain test profile has failures.\n */\nexport function hasFailuresByTestObject(\n  testObject: TIsolateTest,\n  severityKey: Severity,\n  fieldName?: TFieldName\n): boolean {\n  if (!VestTest.hasFailures(testObject)) {\n    return false;\n  }\n\n  if (nonMatchingFieldName(VestTest.getData(testObject), fieldName)) {\n    return false;\n  }\n\n  if (nonMatchingSeverityProfile(severityKey, testObject)) {\n    return false;\n  }\n\n  return true;\n}\n","import { either } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { Severity } from 'Severity';\nimport { VestTest } from 'VestTest';\n\n/**\n * Checks that a given test object matches the currently specified severity level\n */\nexport function nonMatchingSeverityProfile(\n  severity: Severity,\n  testObject: TIsolateTest\n): boolean {\n  return either(severity === Severity.WARNINGS, VestTest.warns(testObject));\n}\n","import { useIsOptionalFieldApplied } from 'optional';\nimport { Predicates } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { TIsolateTest } from 'IsolateTest';\nimport { OptionalFieldTypes } from 'OptionalTypes';\nimport { Severity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport {\n  hasErrorsByTestObjects,\n  hasGroupFailuresByTestObjects,\n} from 'hasFailuresByTestObjects';\nimport { nonMatchingFieldName } from 'matchingFieldName';\nimport { nonMatchingGroupName } from 'matchingGroupName';\n\nexport function useShouldAddValidProperty(fieldName?: TFieldName): boolean {\n  // Is the field optional, and the optional condition is applied\n  if (useIsOptionalFieldApplied(fieldName)) {\n    return true;\n  }\n\n  // Are there no tests?\n  if (TestWalker.hasNoTests()) {\n    return false;\n  }\n\n  // // Does the field have any tests with errors?\n  if (hasErrorsByTestObjects(fieldName)) {\n    return false;\n  }\n\n  // Does the given field have any pending tests that are not optional?\n  if (useHasNonOptionalIncomplete(fieldName)) {\n    return false;\n  }\n\n  // Does the field have no missing tests?\n  return useNoMissingTests(fieldName);\n}\n\nexport function useShouldAddValidPropertyInGroup(\n  groupName: TGroupName,\n  fieldName: TFieldName\n): boolean {\n  if (useIsOptionalFieldApplied(fieldName)) {\n    return true;\n  }\n\n  if (hasGroupFailuresByTestObjects(Severity.ERRORS, groupName, fieldName)) {\n    return false;\n  }\n\n  // Do the given group/field have any pending tests that are not optional?\n  if (useHasNonOptionalIncompleteByGroup(groupName, fieldName)) {\n    return false;\n  }\n\n  return useNoMissingTestsByGroup(groupName, fieldName);\n}\n\n// Does the given field have any pending tests that are not optional?\nfunction useHasNonOptionalIncomplete(fieldName?: TFieldName) {\n  return SuiteWalker.hasPending(\n    Predicates.all(\n      VestTest.is,\n      (testObject: TIsolateTest) =>\n        !nonMatchingFieldName(VestTest.getData(testObject), fieldName),\n      () => !useIsOptionalFieldApplied(fieldName)\n    )\n  );\n}\n\n// Do the given group/field have any pending tests that are not optional?\nfunction useHasNonOptionalIncompleteByGroup(\n  groupName: TGroupName,\n  fieldName: TFieldName\n): boolean {\n  return SuiteWalker.hasPending(\n    Predicates.all(\n      VestTest.is,\n      (testObject: TIsolateTest) =>\n        !nonMatchingGroupName(testObject, groupName),\n      (testObject: TIsolateTest) =>\n        !nonMatchingFieldName(VestTest.getData(testObject), fieldName),\n      () => !useIsOptionalFieldApplied(fieldName)\n    )\n  );\n}\n\n// Did all of the tests for the provided field run/omit?\n// This makes sure that the fields are not skipped or pending.\nfunction useNoMissingTests(fieldName?: string): boolean {\n  return TestWalker.everyTest(testObject => {\n    return useNoMissingTestsLogic(testObject, fieldName);\n  });\n}\n\n// Does the group have no missing tests?\nfunction useNoMissingTestsByGroup(\n  groupName: TGroupName,\n  fieldName?: TFieldName\n): boolean {\n  return TestWalker.everyTest(testObject => {\n    if (nonMatchingGroupName(testObject, groupName)) {\n      return true;\n    }\n\n    return useNoMissingTestsLogic(testObject, fieldName);\n  });\n}\n\nfunction useNoMissingTestsLogic(\n  testObject: TIsolateTest,\n  fieldName?: TFieldName\n): boolean {\n  if (nonMatchingFieldName(VestTest.getData(testObject), fieldName)) {\n    return true;\n  }\n\n  /**\n   * The reason we're checking for the optional field here and not in \"omitOptionalFields\"\n   * is because that unlike the bool/function check we do there, here it only depends on\n   * whether the field was tested already or not.\n   *\n   * We qualify the test as not missing only if it was already run, if it is omitted,\n   * or if it is marked as optional, even if the optional check did not apply yet -\n   * but the test did not reach its final state.\n   */\n\n  return (\n    VestTest.isOmitted(testObject) ||\n    VestTest.isTested(testObject) ||\n    useOptionalTestAwaitsResolution(testObject)\n  );\n}\n\nfunction useOptionalTestAwaitsResolution(testObject: TIsolateTest): boolean {\n  // Does the test belong to an optional field,\n  // and the test itself is still in an indeterminate state?\n\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const { fieldName } = VestTest.getData(testObject);\n\n  return (\n    SuiteOptionalFields.getOptionalField(root, fieldName).type ===\n      OptionalFieldTypes.AUTO && VestTest.awaitsResolution(testObject)\n  );\n}\n","import { Maybe, assign, defaultTo } from 'vest-utils';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { countKeyBySeverity, Severity } from 'Severity';\nimport {\n  Groups,\n  SingleTestSummary,\n  SuiteSummary,\n  SummaryBase,\n  TFieldName,\n  TGroupName,\n  Tests,\n} from 'SuiteResultTypes';\nimport { SummaryFailure } from 'SummaryFailure';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport {\n  useShouldAddValidProperty,\n  useShouldAddValidPropertyInGroup,\n} from 'shouldAddValidProperty';\n\nexport function useProduceSuiteSummary<\n  F extends TFieldName,\n  G extends TGroupName,\n>(): SuiteSummary<F, G> {\n  const summary: SuiteSummary<F, G> = new SuiteSummary();\n\n  TestWalker.walkTests<F, G>(testObject => {\n    summary.tests = useAppendToTest(summary.tests, testObject);\n    summary.groups = useAppendToGroup(summary.groups, testObject);\n    summary.errors = appendFailures(\n      Severity.ERRORS,\n      summary.errors,\n      testObject,\n    );\n    summary.warnings = appendFailures(\n      Severity.WARNINGS,\n      summary.warnings,\n      testObject,\n    );\n  });\n\n  summary.valid = useShouldAddValidProperty();\n\n  return countOverallStates(summary);\n}\n\nfunction appendFailures<F extends TFieldName, G extends TGroupName>(\n  key: Severity,\n  failures: SummaryFailure<F, G>[],\n  testObject: TIsolateTest<F, G>,\n): SummaryFailure<F, G>[] {\n  if (VestTest.isOmitted(testObject)) {\n    return failures;\n  }\n\n  const shouldAppend =\n    key === Severity.WARNINGS\n      ? VestTest.isWarning(testObject)\n      : VestTest.isFailing(testObject);\n\n  if (shouldAppend) {\n    return failures.concat(SummaryFailure.fromTestObject(testObject));\n  }\n  return failures;\n}\n\nfunction useAppendToTest<F extends TFieldName>(\n  tests: Tests<F>,\n  testObject: TIsolateTest<F>,\n): Tests<F> {\n  const fieldName = VestTest.getData<F>(testObject).fieldName;\n\n  const newTests = {\n    ...tests,\n  };\n\n  newTests[fieldName] = appendTestObject(newTests[fieldName], testObject);\n  // If `valid` is false to begin with, keep it that way. Otherwise, assess.\n  newTests[fieldName].valid =\n    newTests[fieldName].valid === false\n      ? false\n      : useShouldAddValidProperty(fieldName);\n\n  return newTests;\n}\n\n/**\n * Appends to a group object if within a group\n */\nfunction useAppendToGroup(\n  groups: Groups<TGroupName, TFieldName>,\n  testObject: TIsolateTest,\n): Groups<TGroupName, TFieldName> {\n  const { groupName, fieldName } = VestTest.getData(testObject);\n\n  if (!groupName) {\n    return groups;\n  }\n\n  const newGroups = {\n    ...groups,\n  };\n\n  newGroups[groupName] = newGroups[groupName] || {};\n  newGroups[groupName][fieldName] = appendTestObject(\n    newGroups[groupName][fieldName],\n    testObject,\n  );\n\n  newGroups[groupName][fieldName].valid =\n    newGroups[groupName][fieldName].valid === false\n      ? false\n      : useShouldAddValidPropertyInGroup(groupName, fieldName);\n\n  return newGroups;\n}\n\n/**\n * Counts the failed tests and adds global counters\n */\nfunction countOverallStates<F extends TFieldName, G extends TGroupName>(\n  summary: SuiteSummary<F, G>,\n): SuiteSummary<F, G> {\n  for (const test in summary.tests) {\n    summary.errorCount += summary.tests[test].errorCount;\n    summary.warnCount += summary.tests[test].warnCount;\n    summary.testCount += summary.tests[test].testCount;\n    summary.pendingCount += summary.tests[test].pendingCount;\n  }\n  return summary;\n}\n\n/**\n * Appends the test to a results object.\n */\n// eslint-disable-next-line max-statements, complexity\nfunction appendTestObject(\n  summaryKey: Maybe<SingleTestSummary>,\n  testObject: TIsolateTest,\n): SingleTestSummary {\n  const { message } = VestTest.getData(testObject);\n\n  // Let's first create a new object, so we don't mutate the original.\n  const nextSummaryKey = defaultTo<SingleTestSummary>(\n    summaryKey ? { ...summaryKey } : null,\n    baseTestStats,\n  );\n\n  // If the test is not actionable, we don't need to append it to the summary.\n  if (VestTest.isNonActionable(testObject)) return nextSummaryKey;\n\n  // Increment the pending count if the test is pending.\n  if (VestTest.isPending(testObject)) {\n    nextSummaryKey.pendingCount++;\n  }\n\n  // Increment the error count if the test is failing.\n  if (VestTest.isFailing(testObject)) {\n    incrementFailures(Severity.ERRORS);\n  } else if (VestTest.isWarning(testObject)) {\n    // Increment the warning count if the test is warning.\n    incrementFailures(Severity.WARNINGS);\n  }\n\n  // Increment the test count.\n  nextSummaryKey.testCount++;\n\n  return nextSummaryKey;\n\n  // Helper function to increment the failure count.\n  function incrementFailures(severity: Severity) {\n    const countKey = countKeyBySeverity(severity);\n    nextSummaryKey[countKey]++;\n    if (message) {\n      nextSummaryKey[severity] = (nextSummaryKey[severity] || []).concat(\n        message,\n      );\n    }\n  }\n}\n\nfunction baseTestStats() {\n  return assign(new SummaryBase(), {\n    errors: [],\n    valid: true,\n    warnings: [],\n  });\n}\n","import { assign } from 'vest-utils';\n\nimport { useSuiteName, useSuiteResultCache } from 'Runtime';\nimport { SuiteResult, TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { suiteSelectors } from 'suiteSelectors';\nimport { useProduceSuiteSummary } from 'useProduceSuiteSummary';\n\nexport function useCreateSuiteResult<\n  F extends TFieldName,\n  G extends TGroupName\n>(): SuiteResult<F, G> {\n  return useSuiteResultCache<F, G>(() => {\n    // @vx-allow use-use\n    const summary = useProduceSuiteSummary<F, G>();\n\n    // @vx-allow use-use\n    const suiteName = useSuiteName();\n    return Object.freeze(\n      assign(summary, suiteSelectors<F, G>(summary), {\n        suiteName,\n      })\n    ) as SuiteResult<F, G>;\n  });\n}\n","import { CB, optionalFunctionValue } from 'vest-utils';\nimport { Isolate } from 'vestjs-runtime';\n\nimport { SuiteContext, useSkipped } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\nimport { TDraftCondition } from 'getTypedMethods';\nimport { useCreateSuiteResult } from 'suiteResult';\n\n/**\n * Conditionally skips running tests within the callback.\n *\n * @example\n *\n * skipWhen(res => res.hasErrors('username'), () => {\n *  test('username', 'User already taken', async () => await doesUserExist(username)\n * });\n */\n// @vx-allow use-use\nexport function skipWhen<F extends TFieldName, G extends TGroupName>(\n  condition: TDraftCondition<F, G>,\n  callback: CB\n): void {\n  Isolate.create(VestIsolateType.SkipWhen, () => {\n    SuiteContext.run(\n      {\n        skipped:\n          // Checking for nested conditional. If we're in a nested skipWhen,\n          // we should skip the test if the parent conditional is true.\n          useIsExcludedIndividually() ||\n          // Otherwise, we should skip the test if the conditional is true.\n          optionalFunctionValue(\n            condition,\n            optionalFunctionValue(useCreateSuiteResult)\n          ),\n      },\n      callback\n    );\n  });\n}\n\nexport function useIsExcludedIndividually(): boolean {\n  return useSkipped();\n}\n","import { isNotNullish } from 'vest-utils';\nimport { TIsolate, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { FocusSelectors } from 'focused';\n\n/**\n * Checks if context has included tests\n */\nexport function useHasOnliedTests(\n  testObject: TIsolateTest,\n  fieldName?: TFieldName\n): boolean {\n  return isNotNullish(\n    Walker.findClosest(testObject, (child: TIsolate) => {\n      if (!FocusSelectors.isIsolateFocused(child)) return false;\n\n      return FocusSelectors.isOnlyFocused(child, fieldName);\n    })\n  );\n}\n","import { Nullable, optionalFunctionValue } from 'vest-utils';\nimport { TIsolate, Walker } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { useInclusion } from 'SuiteContext';\nimport { VestTest } from 'VestTest';\nimport { FocusSelectors, TIsolateFocused } from 'focused';\nimport { useIsExcludedIndividually } from 'skipWhen';\nimport { useHasOnliedTests } from 'useHasOnliedTests';\n//Checks whether a certain test profile excluded by any of the exclusion groups.\n\nfunction useClosestMatchingFocus(\n  testObject: TIsolateTest,\n): Nullable<TIsolateFocused> {\n  return Walker.findClosest(testObject, (child: TIsolate) => {\n    if (!FocusSelectors.isIsolateFocused(child)) return false;\n\n    const { fieldName } = VestTest.getData(testObject);\n\n    return child.data.match?.includes(fieldName) || child.data.matchAll;\n  });\n}\n\nexport function useIsExcluded(testObject: TIsolateTest): boolean {\n  const { fieldName } = VestTest.getData(testObject);\n\n  if (useIsExcludedIndividually()) return true;\n  const inclusion = useInclusion();\n  const focusMatch = useClosestMatchingFocus(testObject);\n  // if test is skipped\n  // no need to proceed\n  if (FocusSelectors.isSkipFocused(focusMatch)) return true;\n  const isTestIncluded = FocusSelectors.isOnlyFocused(focusMatch);\n  // if field is only'ed\n  if (isTestIncluded) return false;\n\n  // If there is _ANY_ `only`ed test (and we already know this one isn't) return true\n  if (useHasOnliedTests(testObject)) {\n    // Check if inclusion rules for this field (`include` hook)\n    return !optionalFunctionValue(inclusion[fieldName], testObject);\n  }\n\n  // We're done here. This field is not excluded\n  return false;\n}\n","import { Modes } from 'Modes';\nimport { useMode } from 'SuiteContext';\nimport { WithFieldName } from 'TestTypes';\nimport { hasErrorsByTestObjects } from 'hasFailuresByTestObjects';\n\n/**\n * Sets the current execution mode for the current suite.\n *\n * Supported modes:\n * - `EAGER` - (default) Runs all tests, but stops on first failure for each given field.\n * - `ALL` - Runs all tests, regardless of failures.\n * - `ONE` - Stops suite execution on first failure of any field.\n *\n * @example\n * ```js\n * import {Modes, create} from 'vest';\n *\n * const suite = create('suite_name', () => {\n *  vest.mode(Modes.ALL);\n *\n *  // ...\n * });\n * ```\n * @param 'ALL' | 'EAGER' | 'ONE' mode - The mode to set.\n */\n\n// @vx-allow use-use\nexport function mode(mode: Modes): void {\n  const [, setMode] = useMode();\n\n  setMode(mode);\n}\n\nfunction useIsMode(mode: Modes): boolean {\n  const [currentMode] = useMode();\n\n  return currentMode === mode;\n}\n\nfunction useIsEager(): boolean {\n  return useIsMode(Modes.EAGER);\n}\n\nfunction useIsOne(): boolean {\n  return useIsMode(Modes.ONE);\n}\n\nexport function useShouldSkipBasedOnMode(testData: WithFieldName): boolean {\n  if (useIsOne()) {\n    return hasErrorsByTestObjects();\n  }\n\n  if (useIsEager()) {\n    return hasErrorsByTestObjects(testData.fieldName);\n  }\n\n  return false;\n}\n","import type { CB } from 'vest-utils';\nimport { optionalFunctionValue } from 'vest-utils';\nimport { Isolate } from 'vestjs-runtime';\n\nimport { SuiteContext, useOmitted } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\nimport { TDraftCondition } from 'getTypedMethods';\nimport { useCreateSuiteResult } from 'suiteResult';\n\n/**\n * Conditionally omits tests from the suite.\n *\n * @example\n *\n * omitWhen(res => res.hasErrors('username'), () => {\n *  test('username', 'User already taken', async () => await doesUserExist(username)\n * });\n */\n// @vx-allow use-use\nexport function omitWhen<F extends TFieldName, G extends TGroupName>(\n  conditional: TDraftCondition<F, G>,\n  callback: CB\n): void {\n  Isolate.create(VestIsolateType.OmitWhen, () => {\n    SuiteContext.run(\n      {\n        omitted:\n          useWithinActiveOmitWhen() ||\n          optionalFunctionValue(\n            conditional,\n            optionalFunctionValue(useCreateSuiteResult)\n          ),\n      },\n      callback\n    );\n  });\n}\n\n// Checks that we're currently in an active omitWhen block\nexport function useWithinActiveOmitWhen(): boolean {\n  return useOmitted();\n}\n","import { useIsOptionalFieldApplied } from 'optional';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { VestTest } from 'VestTest';\nimport { useShouldSkipBasedOnMode } from 'mode';\nimport { useWithinActiveOmitWhen } from 'omitWhen';\nimport { useIsExcludedIndividually } from 'skipWhen';\nimport { useIsExcluded } from 'useIsExcluded';\n\nexport function useVerifyTestRun(\n  testObject: TIsolateTest,\n  collisionResult: TIsolateTest = testObject,\n): TIsolateTest {\n  const testData = VestTest.getData(testObject);\n\n  if (useShouldSkipBasedOnMode(testData)) {\n    return skipTestAndReturn(testObject);\n  }\n\n  if (useShouldOmit(testData.fieldName)) {\n    return omitTestAndReturn(testObject);\n  }\n\n  if (useIsExcluded(testObject)) {\n    return useForceSkipIfInSkipWhen(collisionResult);\n  }\n\n  return testObject;\n}\n\nfunction useShouldOmit(fieldName: TFieldName): boolean {\n  return useWithinActiveOmitWhen() || useIsOptionalFieldApplied(fieldName);\n}\n\nfunction skipTestAndReturn(testNode: TIsolateTest): TIsolateTest {\n  VestTest.skip(testNode);\n  return testNode;\n}\n\nfunction omitTestAndReturn(testNode: TIsolateTest): TIsolateTest {\n  VestTest.omit(testNode);\n  return testNode;\n}\n\nfunction useForceSkipIfInSkipWhen(testNode: TIsolateTest): TIsolateTest {\n  // We're forcing skipping the pending test\n  // if we're directly within a skipWhen block\n  // This mostly means that we're probably giving\n  // up on this async test intentionally.\n  VestTest.skip(testNode, useIsExcludedIndividually());\n  return testNode;\n}\n","import { Maybe, deferThrow, text } from 'vest-utils';\nimport { IsolateInspector, Reconciler } from 'vestjs-runtime';\nimport type { TIsolate } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport type { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport cancelOverriddenPendingTest from 'cancelOverriddenPendingTest';\nimport { isSameProfileTest } from 'isSameProfileTest';\nimport { useIsExcluded } from 'useIsExcluded';\nimport { useVerifyTestRun } from 'verifyTestRun';\n\nexport class IsolateTestReconciler {\n  static match(currentNode: TIsolate, historyNode: TIsolate): boolean {\n    return VestTest.is(currentNode) && VestTest.is(historyNode);\n  }\n\n  static reconcile(\n    currentNode: TIsolateTest,\n    historyNode: TIsolateTest,\n  ): TIsolateTest {\n    const reconcilerOutput = usePickNode(currentNode, historyNode);\n\n    const nextNode = useVerifyTestRun(currentNode, reconcilerOutput);\n\n    cancelOverriddenPendingTestOnTestReRun(nextNode, currentNode, historyNode);\n\n    return nextNode;\n  }\n}\n\nfunction usePickNode(\n  newNode: TIsolateTest,\n  prevNode: TIsolateTest,\n): TIsolateTest {\n  if (IsolateInspector.usesKey(newNode)) {\n    return useHandleTestWithKey(newNode);\n  }\n\n  if (\n    Reconciler.dropNextNodesOnReorder(nodeReorderDetected, newNode, prevNode)\n  ) {\n    throwTestOrderError(newNode, prevNode);\n    return newNode;\n  }\n\n  if (!VestTest.is(prevNode)) {\n    // I believe we cannot actually reach this point.\n    // Because it should already be handled by nodeReorderDetected.\n    /* istanbul ignore next */\n    return newNode;\n  }\n\n  // FIXME: May-13-2023\n  // This may not be the most ideal solution.\n  // In short: if the node was omitted in the previous run,\n  // we want to re-evaluate it. The reason is that we may incorrectly\n  // identify it is \"optional\" because it was omitted in the previous run.\n  // There may be a better way to handle this. Need to revisit this.\n  if (VestTest.isOmitted(prevNode)) {\n    return newNode;\n  }\n\n  return prevNode;\n}\n\nfunction useHandleTestWithKey(newNode: TIsolateTest): TIsolateTest {\n  return VestTest.cast(\n    Reconciler.handleIsolateNodeWithKey(newNode, (prevNode: TIsolateTest) => {\n      // This is the revoke callback. it determines whether we should revoke the previous node and use the new one.\n      if (VestTest.isNonActionable(prevNode)) {\n        return true;\n      }\n\n      if (useIsExcluded(newNode)) {\n        return false;\n      }\n\n      return true;\n    }),\n  );\n}\n\nfunction cancelOverriddenPendingTestOnTestReRun(\n  nextNode: TIsolate,\n  currentNode: TIsolate,\n  prevTestObject: TIsolateTest,\n) {\n  if (nextNode === currentNode && VestTest.is(currentNode)) {\n    cancelOverriddenPendingTest(prevTestObject, currentNode);\n  }\n}\n\nfunction nodeReorderDetected(\n  newNode: TIsolateTest,\n  prevNode: Maybe<TIsolate>,\n): boolean {\n  return VestTest.is(prevNode) && !isSameProfileTest(prevNode, newNode);\n}\n\nfunction throwTestOrderError(\n  newNode: TIsolateTest,\n  prevNode: Maybe<TIsolate>,\n): void {\n  if (IsolateInspector.canReorder(newNode)) {\n    return;\n  }\n\n  deferThrow(\n    text(ErrorStrings.TESTS_CALLED_IN_DIFFERENT_ORDER, {\n      fieldName: VestTest.getData(newNode).fieldName,\n      prevName: VestTest.is(prevNode)\n        ? VestTest.getData(prevNode).fieldName\n        : undefined,\n    }),\n  );\n}\n","import { Nullable } from 'vest-utils';\nimport { TIsolate } from 'vestjs-runtime';\n\nimport { IsolateTestReconciler } from 'IsolateTestReconciler';\n\nconst reconcilers: IsolateReconciler[] = [IsolateTestReconciler];\n\nexport function registerReconciler(reconciler: IsolateReconciler) {\n  if (reconcilers.includes(reconciler)) {\n    return;\n  }\n\n  reconcilers.push(reconciler);\n}\n\nexport function VestReconciler(\n  currentNode: TIsolate,\n  historyNode: TIsolate,\n): Nullable<TIsolate> {\n  return (\n    reconcilers\n      .find(reconciler => reconciler.match(currentNode, historyNode))\n      ?.reconcile(currentNode as any, historyNode as any) ?? null\n  );\n}\n\nexport type IsolateReconciler = {\n  match(currentNode: TIsolate, historyNode: TIsolate): boolean;\n  reconcile(elecurrentNode: TIsolate, historyNode: TIsolate): TIsolate;\n};\n","import { TIsolateTest } from 'IsolateTest';\nimport { VestTest } from 'VestTest';\nimport { isSameProfileTest } from 'isSameProfileTest';\n\nexport default function cancelOverriddenPendingTest(\n  prevRunTestObject: TIsolateTest,\n  currentRunTestObject: TIsolateTest\n): void {\n  if (\n    currentRunTestObject !== prevRunTestObject &&\n    isSameProfileTest(prevRunTestObject, currentRunTestObject) &&\n    VestTest.isPending(prevRunTestObject)\n  ) {\n    VestTest.cancel(prevRunTestObject);\n  }\n}\n","import { CB } from 'vest-utils';\nimport { TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { SuiteContext } from 'SuiteContext';\nimport { TGroupName } from 'SuiteResultTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport function group<G extends TGroupName>(\n  groupName: G,\n  callback: CB<void>\n): TIsolate;\nexport function group(callback: CB<void>): TIsolate;\nexport function group<G extends TGroupName>(\n  ...args: [groupName: G, callback: CB<void>] | [callback: CB<void>]\n): TIsolate {\n  const [callback, groupName] = args.reverse() as [CB<void>, G];\n\n  return Isolate.create(\n    VestIsolateType.Group,\n    () => {\n      return SuiteContext.run({ ...(groupName && { groupName }) }, callback);\n    },\n  );\n}\n","import { isStringValue, invariant, optionalFunctionValue } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { TIsolateTest } from 'IsolateTest';\nimport { useInclusion } from 'SuiteContext';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { TDraftCondition } from 'getTypedMethods';\nimport { useCreateSuiteResult } from 'suiteResult';\nimport { useHasOnliedTests } from 'useHasOnliedTests';\n\n/**\n * Conditionally includes a field for testing, based on specified criteria.\n *\n * @param {string} fieldName - The name of the field to include for testing.\n *\n * @example\n * include('confirm').when('password');\n * // Includes the \"confirm\" field for testing when the \"password\" field is included\n *\n * include('confirm').when(someValue);\n * // Includes the \"confirm\" field for testing when the value of `someValue` is true\n *\n * include('confirm').when(() => someValue);\n * // Includes the \"confirm\" field for testing when the callback function returns true\n *\n * include('username').when(result => result.hasErrors('username'));\n * // Includes the \"username\" field for testing when there are errors associated with it in the current suite result\n */\n// @vx-allow use-use\nexport function include<F extends TFieldName, G extends TGroupName>(\n  fieldName: F\n): {\n  when: (condition: F | TFieldName | TDraftCondition<F, G>) => void;\n} {\n  invariant(isStringValue(fieldName));\n  const inclusion = useInclusion();\n\n  inclusion[fieldName] = true;\n\n  return { when };\n\n  /**\n   * Specifies the inclusion criteria for the field in `include` function.\n   */\n  function when(condition: F | TFieldName | TDraftCondition<F, G>): void {\n    invariant(condition !== fieldName, ErrorStrings.INCLUDE_SELF);\n\n    const inclusion = useInclusion();\n\n    // This callback will run as part of the \"isExcluded\" series of checks\n    inclusion[fieldName] = function isIncluded(\n      currentNode: TIsolateTest\n    ): boolean {\n      if (isStringValue(condition)) {\n        return useHasOnliedTests(currentNode, condition);\n      }\n\n      return optionalFunctionValue(\n        condition,\n        optionalFunctionValue(useCreateSuiteResult)\n      );\n    };\n  }\n}\n","export enum Events {\n  TEST_RUN_STARTED = 'test_run_started',\n  TEST_COMPLETED = 'test_completed',\n  ALL_RUNNING_TESTS_FINISHED = 'all_running_tests_finished',\n  REMOVE_FIELD = 'remove_field',\n  RESET_FIELD = 'reset_field',\n  RESET_SUITE = 'reset_suite',\n  SUITE_RUN_STARTED = 'suite_run_started',\n  SUITE_CALLBACK_RUN_FINISHED = 'SUITE_CALLBACK_RUN_FINISHED',\n  DONE_TEST_OMISSION_PASS = 'DONE_TEST_OMISSION_PASS',\n}\n","import { CB, Maybe } from 'vest-utils';\nimport { TIsolate, Isolate, IsolateKey } from 'vestjs-runtime';\n\nimport { IsolateTestStateMachine, TestStatus } from 'IsolateTestStateMachine';\nimport { TestSeverity } from 'Severity';\nimport { TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { AsyncTest, TestFn } from 'TestTypes';\nimport { VestIsolateType } from 'VestIsolateType';\n\nexport type TIsolateTest<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName\n> = TIsolate<CommonTestFields<F, G> & IsolateTestPayload>;\n\nexport function IsolateTest<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName\n>(\n  callback: CB,\n  input: CommonTestFields<F, G>,\n  key?: IsolateKey\n): TIsolateTest<F, G> {\n  const payload: IsolateTestPayload = {\n    ...IsolateTestBase(),\n    fieldName: input.fieldName,\n    testFn: input.testFn,\n  };\n\n  if (input.groupName) {\n    payload.groupName = input.groupName;\n  }\n\n  if (input.message) {\n    payload.message = input.message;\n  }\n  const isolate = Isolate.create<IsolateTestPayload>(\n    VestIsolateType.Test,\n    callback,\n    payload,\n    key ?? null\n  );\n\n  return isolate as TIsolateTest<F, G>;\n}\n\nexport function IsolateTestBase() {\n  return {\n    severity: TestSeverity.Error,\n    status: IsolateTestStateMachine.initial(),\n  };\n}\n\nexport type IsolateTestPayload<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName\n> = CommonTestFields<F, G> & {\n  severity: TestSeverity;\n  status: TestStatus;\n  asyncTest?: AsyncTest;\n};\n\ntype CommonTestFields<\n  F extends TFieldName = TFieldName,\n  G extends TGroupName = TGroupName\n> = {\n  message?: Maybe<string>;\n  groupName?: G;\n  fieldName: F;\n  testFn: TestFn;\n};\n","import { isPromise, isStringValue, text, deferThrow } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { TIsolateTest } from 'IsolateTest';\nimport { SuiteContext } from 'SuiteContext';\nimport { TestResult } from 'TestTypes';\nimport { VestTest } from 'VestTest';\nimport { shouldUseErrorAsMessage } from 'shouldUseErrorMessage';\nimport { useVerifyTestRun } from 'verifyTestRun';\n\n// eslint-disable-next-line max-statements\nexport function useAttemptRunTest(testObject: TIsolateTest) {\n  useVerifyTestRun(testObject);\n\n  if (VestTest.isUntested(testObject)) {\n    return useRunTest(testObject);\n  }\n\n  if (!VestTest.isNonActionable(testObject)) {\n    // Probably unreachable. If we get here, it means that\n    // something was really wrong and should be reported.\n    /* istanbul ignore next */\n    deferThrow(\n      text(ErrorStrings.UNEXPECTED_TEST_REGISTRATION_ERROR, {\n        testObject: JSON.stringify(testObject),\n      })\n    );\n  }\n}\n\nfunction runSyncTest(testObject: TIsolateTest): TestResult {\n  return SuiteContext.run({ currentTest: testObject }, () => {\n    let result: TestResult;\n\n    const { message, testFn } = VestTest.getData(testObject);\n\n    try {\n      result = testFn({ signal: testObject.abortController.signal });\n    } catch (error) {\n      if (shouldUseErrorAsMessage(message, error)) {\n        VestTest.getData(testObject).message = error;\n      }\n      result = false;\n    }\n\n    if (result === false) {\n      VestTest.fail(testObject);\n    }\n\n    return result;\n  });\n}\n\n/**\n * runs test, if async - adds to pending array\n */\nfunction useRunTest(testObject: TIsolateTest): Promise<void> | undefined {\n  // Run test callback.\n  // If a promise is returned, set as async and\n  // Move to pending list.\n  const result = runSyncTest(testObject);\n  try {\n    // try catch for safe property access\n    // in case object is an enforce chain\n    if (isPromise(result)) {\n      VestTest.getData(testObject).asyncTest = result;\n      return useRunAsyncTest(testObject);\n    }\n\n    onTestCompleted(testObject);\n  } catch (e) {\n    // Probably unreachable. If we get here, it means that\n    // something was really wrong and should be reported.\n    /* istanbul ignore next */\n    throw new Error(\n      text(ErrorStrings.UNEXPECTED_TEST_REGISTRATION_ERROR, {\n        testObject: JSON.stringify(testObject),\n        error: e,\n      })\n    );\n  }\n}\n\n/**\n * Runs async test.\n */\nfunction useRunAsyncTest(testObject: TIsolateTest): Promise<void> | undefined {\n  const { asyncTest, message } = VestTest.getData(testObject);\n\n  if (!isPromise(asyncTest)) return;\n  // VestTest.setPending(testObject);\n\n  const done = VestRuntime.persist(() => {\n    onTestCompleted(testObject);\n  });\n  const fail = VestRuntime.persist((rejectionMessage?: string) => {\n    if (VestTest.isCanceled(testObject)) {\n      return;\n    }\n\n    VestTest.getData(testObject).message = isStringValue(rejectionMessage)\n      ? rejectionMessage\n      : message;\n    VestTest.fail(testObject);\n\n    done();\n  });\n\n  return asyncTest.then(done, fail);\n}\n\nfunction onTestCompleted(testObject: TIsolateTest) {\n  // Attempts passing if the test is not already failed.\n  // or is not canceled/omitted.\n  VestTest.pass(testObject);\n}\n","import { Maybe, isStringValue, isUndefined } from 'vest-utils';\n\nexport function shouldUseErrorAsMessage(\n  message: Maybe<string>,\n  error: unknown\n): error is Maybe<string> {\n  // kind of cheating with this safe guard, but it does the job\n  return isUndefined(message) && isStringValue(error);\n}\n","import { assign, invariant, isFunction, isStringValue, text } from 'vest-utils';\nimport { Bus, IsolateKey } from 'vestjs-runtime';\n\nimport { Events } from 'BusEvents';\nimport { ErrorStrings } from 'ErrorStrings';\nimport { IsolateTest, TIsolateTest } from 'IsolateTest';\nimport { useGroupName } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { useAttemptRunTest } from 'runTest';\nimport { wrapTestMemo } from 'test.memo';\n\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  message: string,\n  cb: TestFn\n): TIsolateTest;\nfunction vestTest<F extends TFieldName>(fieldName: F, cb: TestFn): TIsolateTest;\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  message: string,\n  cb: TestFn,\n  key: IsolateKey\n): TIsolateTest;\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  cb: TestFn,\n  key: IsolateKey\n): TIsolateTest;\n// @vx-allow use-use\nfunction vestTest<F extends TFieldName>(\n  fieldName: F,\n  ...args:\n    | [message: string, cb: TestFn]\n    | [cb: TestFn]\n    | [message: string, cb: TestFn, key: IsolateKey]\n    | [cb: TestFn, key: IsolateKey]\n): TIsolateTest {\n  const [message, testFn, key] = (\n    isFunction(args[1]) ? args : [undefined, ...args]\n  ) as [string, TestFn, IsolateKey];\n\n  validateTestParams(fieldName, testFn);\n\n  const groupName = useGroupName();\n\n  const testObjectInput = { fieldName, groupName, message, testFn };\n\n  // This invalidates the suite cache.\n  Bus.useEmit(Events.TEST_RUN_STARTED);\n\n  return IsolateTest(useAttemptRunTest, testObjectInput, key);\n}\n\nexport const test = assign(vestTest, {\n  memo: wrapTestMemo(vestTest),\n});\n\nexport type VTest = typeof vestTest;\n\nfunction validateTestParams(fieldName: string, testFn: TestFn): void {\n  const fnName = 'test';\n  invariant(\n    isStringValue(fieldName),\n    text(ErrorStrings.INVALID_PARAM_PASSED_TO_FUNCTION, {\n      fn_name: fnName,\n      param: 'fieldName',\n      expected: 'string',\n    })\n  );\n  invariant(\n    isFunction(testFn),\n    text(ErrorStrings.INVALID_PARAM_PASSED_TO_FUNCTION, {\n      fn_name: fnName,\n      param: 'callback',\n      expected: 'function',\n    })\n  );\n}\n","import { CB, isNull } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport * as Runtime from 'Runtime';\nimport { useTestMemoCache } from 'SuiteContext';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { VestTest } from 'VestTest';\nimport { VTest } from 'test';\n\n// @vx-allow use-use\nexport function wrapTestMemo<FN extends TFieldName>(test: VTest): TestMemo<FN> {\n  /**\n   * Caches a test result based on the test's dependencies.\n   */\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParametersWithoutMessage\n  ): TIsolateTest;\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParametersWithMessage\n  ): TIsolateTest;\n  function memo<F extends FN>(\n    fieldName: F,\n    ...args: ParamsOverload\n  ): TIsolateTest {\n    const [deps, testFn, msg] = args.reverse() as [any[], TestFn, string];\n\n    // Implicit dependency for better specificity\n    const dependencies = [\n      Runtime.useSuiteId(),\n      fieldName,\n      VestRuntime.useCurrentCursor(),\n    ].concat(deps);\n\n    return useGetTestFromCache(dependencies, cacheAction);\n\n    function cacheAction() {\n      return test(fieldName, msg, testFn);\n    }\n  }\n\n  return memo;\n}\n\nfunction useGetTestFromCache(\n  dependencies: any[],\n  cacheAction: CB<TIsolateTest>\n): TIsolateTest {\n  const cache = useTestMemoCache();\n\n  const cached = cache.get(dependencies);\n\n  if (isNull(cached)) {\n    // cache miss\n    return cache(dependencies, cacheAction);\n  }\n\n  const [, cachedValue] = cached;\n\n  if (VestTest.isCanceled(cachedValue)) {\n    // cache hit, but test is canceled\n    cache.invalidate(dependencies);\n    return cache(dependencies, cacheAction);\n  }\n\n  VestRuntime.addNodeToHistory(cachedValue);\n\n  return cachedValue;\n}\n\nexport type TestMemo<F extends TFieldName> = {\n  (fieldName: F, ...args: ParametersWithoutMessage): TIsolateTest;\n  (fieldName: F, ...args: ParametersWithMessage): TIsolateTest;\n};\n\ntype ParametersWithoutMessage = [test: TestFn, dependencies: unknown[]];\ntype ParametersWithMessage = [\n  message: string,\n  test: TestFn,\n  dependencies: unknown[]\n];\n\ntype ParamsOverload = ParametersWithoutMessage | ParametersWithMessage;\n","// import { optional, skipWhen, omitWhen, IsolateTest, group } from 'vest';\nimport { optional } from 'optional';\nimport { CB, DynamicValue } from 'vest-utils';\nimport { TIsolate, IsolateKey } from 'vestjs-runtime';\n\nimport { TIsolateTest } from 'IsolateTest';\nimport { OptionalsInput } from 'OptionalTypes';\nimport { SuiteResult, TFieldName, TGroupName } from 'SuiteResultTypes';\nimport { TestFn } from 'TestTypes';\nimport { FieldExclusion, only, skip } from 'focused';\nimport { group } from 'group';\nimport { include } from 'include';\nimport { omitWhen } from 'omitWhen';\nimport { skipWhen } from 'skipWhen';\nimport { test } from 'test';\nimport { TestMemo } from 'test.memo';\n\nexport function getTypedMethods<\n  F extends TFieldName,\n  G extends TGroupName\n>(): TTypedMethods<F, G> {\n  return {\n    group,\n    include,\n    omitWhen,\n    only,\n    optional,\n    skip,\n    skipWhen,\n    test,\n  };\n}\n\nexport type TTypedMethods<F extends TFieldName, G extends TGroupName> = {\n  include: (fieldName: F) => {\n    when: (condition: F | TDraftCondition<F, G>) => void;\n  };\n  omitWhen: (conditional: TDraftCondition<F, G>, callback: CB) => void;\n  only: {\n    (item: FieldExclusion<F>): void;\n  };\n  optional: (optionals: OptionalsInput<F>) => void;\n  skip: {\n    (item: FieldExclusion<F>): void;\n  };\n  skipWhen: (condition: TDraftCondition<F, G>, callback: CB) => void;\n  test: {\n    (fieldName: F, message: string, cb: TestFn): TIsolateTest;\n    (fieldName: F, cb: TestFn): TIsolateTest;\n    (fieldName: F, message: string, cb: TestFn, key: IsolateKey): TIsolateTest;\n    (fieldName: F, cb: TestFn, key: IsolateKey): TIsolateTest;\n  } & {\n    memo: TestMemo<F>;\n  };\n  group: {\n    (callback: () => void): TIsolate;\n    (groupName: G, callback: () => void): TIsolate;\n  };\n};\n\nexport type TDraftCondition<\n  F extends TFieldName,\n  G extends TGroupName\n> = DynamicValue<boolean, [draft: SuiteResult<F, G>]>;\n","import { isEmpty, optionalFunctionValue } from 'vest-utils';\nimport { Bus, VestRuntime } from 'vestjs-runtime';\n\nimport { Events } from 'BusEvents';\nimport { SuiteOptionalFields, TIsolateSuite } from 'IsolateSuite';\nimport { TIsolateTest } from 'IsolateTest';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\n\n/**\n * This module gets triggered once the suite is done running its sync tests.\n *\n * It goes over all the tests in the state, and checks if they need to be omitted.\n */\n\nexport function useOmitOptionalFields(): void {\n  const root = VestRuntime.useAvailableRoot<TIsolateSuite>();\n\n  const optionalFields = SuiteOptionalFields.getOptionalFields(root);\n\n  // If there are no optional fields, we don't need to do anything\n  if (isEmpty(optionalFields)) {\n    return;\n  }\n\n  // Create an object to store the fields that need to be omitted\n  const shouldOmit = new Set<string>();\n\n  // iterate over each of the tests in the state\n  TestWalker.walkTests(testObject => {\n    if (VestTest.isPending(testObject)) {\n      return;\n    }\n    const { fieldName } = VestTest.getData(testObject);\n\n    // If we already added the current field (not this test specifically)\n    // no need for further checks, go and omit the test\n    if (shouldOmit.has(fieldName)) {\n      verifyAndOmit(testObject);\n    } else {\n      // check if the field has an optional function\n      // if so, run it and verify/omit the test\n      runOptionalConfig(testObject);\n    }\n  });\n\n  Bus.useEmit(Events.DONE_TEST_OMISSION_PASS);\n\n  function verifyAndOmit(testObject: TIsolateTest) {\n    const { fieldName } = VestTest.getData(testObject);\n    if (shouldOmit.has(fieldName)) {\n      VestTest.omit(testObject);\n      SuiteOptionalFields.setOptionalField(root, fieldName, current => ({\n        ...current,\n        applied: true,\n      }));\n    }\n  }\n\n  function runOptionalConfig(testObject: TIsolateTest) {\n    const { fieldName } = VestTest.getData(testObject);\n\n    // Ge the optional configuration for the given field\n    const optionalConfig = SuiteOptionalFields.getOptionalField(\n      root,\n      fieldName\n    );\n\n    // If the optional was set to a function or a boolean, run it and verify/omit the test\n    if (optionalFunctionValue(optionalConfig.rule) === true) {\n      shouldOmit.add(fieldName);\n    }\n\n    verifyAndOmit(testObject);\n  }\n}\n","import { CB, ValueOf } from 'vest-utils';\nimport { Bus, RuntimeEvents, TIsolate } from 'vestjs-runtime';\n\nimport { Events } from 'BusEvents';\nimport * as CommonStateMachine from 'CommonStateMachine';\nimport { TIsolateTest } from 'IsolateTest';\nimport {\n  useExpireSuiteResultCache,\n  useResetCallbacks,\n  useResetSuite,\n} from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { TestWalker } from 'TestWalker';\nimport { VestTest } from 'VestTest';\nimport { useOmitOptionalFields } from 'omitOptionalFields';\nimport { useRunDoneCallbacks, useRunFieldCallbacks } from 'runCallbacks';\n\n// eslint-disable-next-line max-statements, max-lines-per-function\nexport function useInitVestBus() {\n  const VestBus = Bus.useBus();\n\n  // Report a the completion of a test. There may be other tests with the same\n  // name that are still running, or not yet started.\n  on(Events.TEST_COMPLETED, (testObject: TIsolateTest) => {\n    if (VestTest.isCanceled(testObject)) {\n      return;\n    }\n\n    const { fieldName } = VestTest.getData(testObject);\n\n    useRunFieldCallbacks(fieldName);\n  });\n\n  on(Events.TEST_RUN_STARTED, () => {\n    /* Let's just invalidate the suite cache for now */\n  });\n\n  on(RuntimeEvents.ISOLATE_PENDING, (isolate: TIsolate) => {\n    if (VestTest.is(isolate)) {\n      VestTest.setPending(isolate);\n    }\n\n    CommonStateMachine.setPending(isolate);\n  });\n\n  on(RuntimeEvents.ISOLATE_DONE, (isolate: TIsolate) => {\n    if (VestTest.is(isolate)) {\n      VestBus.emit(Events.TEST_COMPLETED, isolate);\n    }\n\n    CommonStateMachine.setDone(isolate);\n\n    if (!SuiteWalker.hasPending()) {\n      // When no more tests are running, emit the done event\n      VestBus.emit(Events.ALL_RUNNING_TESTS_FINISHED);\n    }\n  });\n\n  on(Events.DONE_TEST_OMISSION_PASS, () => {\n    /* We NEED to refresh the cache here. Don't ask */\n  });\n\n  // Called when all the tests, including async, are done running\n  on(Events.ALL_RUNNING_TESTS_FINISHED, () => {\n    // Small optimization. We don't need to run this if there are no async tests\n    // The reason is that we run this function immediately after the suite callback\n    // is run, so if the suite is only comprised of sync tests, we don't need to\n    // run this function twice since we know for a fact the state is up to date\n    if (TestWalker.someTests(VestTest.isAsyncTest)) {\n      useOmitOptionalFields();\n    }\n    useRunDoneCallbacks();\n  });\n\n  on(Events.RESET_FIELD, (fieldName: TFieldName) => {\n    TestWalker.resetField(fieldName);\n  });\n\n  on(Events.SUITE_RUN_STARTED, () => {\n    useResetCallbacks();\n  });\n\n  on(Events.SUITE_CALLBACK_RUN_FINISHED, () => {\n    useOmitOptionalFields();\n  });\n\n  on(Events.REMOVE_FIELD, (fieldName: TFieldName) => {\n    TestWalker.removeTestByFieldName(fieldName);\n  });\n\n  on(Events.RESET_SUITE, () => {\n    useResetSuite();\n  });\n\n  return {\n    subscribe,\n  };\n\n  function subscribe(cb: CB) {\n    return VestBus.on('*', () => {\n      cb();\n    }).off;\n  }\n\n  function on(event: VestEvents, cb: (...args: any[]) => void) {\n    VestBus.on(event, (...args: any[]) => {\n      // This is more concise, but it might be an overkill\n      // if we're adding events that don't need to invalidate the cache\n      useExpireSuiteResultCache();\n      cb(...args);\n    });\n  }\n}\n\ntype VestEvents = Events | ValueOf<typeof RuntimeEvents> | '*';\n","import { isArray, callEach } from 'vest-utils';\n\nimport { useDoneCallbacks, useFieldCallbacks } from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\n\n/**\n * Runs done callback per field when async tests are finished running.\n */\nexport function useRunFieldCallbacks(fieldName?: TFieldName): void {\n  const [fieldCallbacks] = useFieldCallbacks();\n\n  if (\n    fieldName &&\n    !SuiteWalker.hasRemainingWithTestNameMatching(fieldName) &&\n    isArray(fieldCallbacks[fieldName])\n  ) {\n    callEach(fieldCallbacks[fieldName]);\n  }\n}\n\n/**\n * Runs unlabelled done callback when async tests are finished running.\n */\nexport function useRunDoneCallbacks() {\n  const [doneCallbacks] = useDoneCallbacks();\n  callEach(doneCallbacks);\n}\n","import { assign } from 'vest-utils';\nimport { VestRuntime } from 'vestjs-runtime';\n\nimport {\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { SuiteWalker } from 'SuiteWalker';\nimport { useDeferDoneCallback } from 'deferDoneCallback';\nimport { shouldSkipDoneRegistration } from 'shouldSkipDoneRegistration';\nimport { useCreateSuiteResult } from 'suiteResult';\n\nexport function useSuiteRunResult<\n  F extends TFieldName,\n  G extends TGroupName\n>(): SuiteRunResult<F, G> {\n  return Object.freeze(\n    assign(\n      {\n        done: VestRuntime.persist(done),\n      },\n      useCreateSuiteResult<F, G>()\n    )\n  );\n}\n\n/**\n * Registers done callbacks.\n * @register {Object} Vest output object.\n */\n// @vx-allow use-use\nfunction done<F extends TFieldName, G extends TGroupName>(\n  ...args: any[]\n): SuiteRunResult<F, G> {\n  const [callback, fieldName] = args.reverse() as [\n    (res: SuiteResult<F, G>) => void,\n    F\n  ];\n  const output = useSuiteRunResult<F, G>();\n  if (shouldSkipDoneRegistration<F, G>(callback, fieldName, output)) {\n    return output;\n  }\n  const useDoneCallback = () => callback(useCreateSuiteResult());\n  if (!SuiteWalker.hasRemainingWithTestNameMatching(fieldName)) {\n    useDoneCallback();\n    return output;\n  }\n  useDeferDoneCallback(useDoneCallback, fieldName);\n  return output;\n}\n\nexport interface Done<F extends TFieldName, G extends TGroupName> {\n  (...args: [cb: (res: SuiteResult<F, G>) => void]): SuiteRunResult<F, G>;\n  (\n    ...args: [fieldName: F, cb: (res: SuiteResult<F, G>) => void]\n  ): SuiteRunResult<F, G>;\n}\n","/**\n * DONE is here and not in its own module to prevent circular dependency issues.\n */\n\nimport { Maybe, isFunction, numberEquals } from 'vest-utils';\n\nimport {\n  SuiteResult,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\n\nexport function shouldSkipDoneRegistration<\n  F extends TFieldName,\n  G extends TGroupName\n>(\n  callback: (res: SuiteResult<F, G>) => void,\n\n  fieldName: Maybe<F>,\n  output: SuiteRunResult<F, G>\n): boolean {\n  // If we do not have any test runs for the current field\n  return !!(\n    !isFunction(callback) ||\n    (fieldName && numberEquals(output.tests[fieldName]?.testCount ?? 0, 0))\n  );\n}\n","import { assign } from 'vest-utils';\n\nimport { DoneCallback, useDoneCallbacks, useFieldCallbacks } from 'Runtime';\nimport { TFieldName } from 'SuiteResultTypes';\n\nexport function useDeferDoneCallback(\n  doneCallback: DoneCallback,\n  fieldName?: TFieldName\n): void {\n  const [, setFieldCallbacks] = useFieldCallbacks();\n  const [, setDoneCallbacks] = useDoneCallbacks();\n\n  if (fieldName) {\n    setFieldCallbacks(fieldCallbacks =>\n      assign(fieldCallbacks, {\n        [fieldName]: (fieldCallbacks[fieldName] || []).concat(doneCallback),\n      })\n    );\n\n    return;\n  }\n\n  setDoneCallbacks(doneCallbacks => doneCallbacks.concat(doneCallback));\n}\n","import { assign, CB } from 'vest-utils';\nimport { Bus, VestRuntime } from 'vestjs-runtime';\n\nimport { TTypedMethods, getTypedMethods } from './getTypedMethods';\n\nimport { Events } from 'BusEvents';\nimport { IsolateSuite, TIsolateSuite } from 'IsolateSuite';\nimport { useCreateVestState, useLoadSuite } from 'Runtime';\nimport { SuiteContext } from 'SuiteContext';\nimport {\n  SuiteName,\n  SuiteRunResult,\n  TFieldName,\n  TGroupName,\n} from 'SuiteResultTypes';\nimport { Suite } from 'SuiteTypes';\nimport { useInitVestBus } from 'VestBus';\nimport { VestReconciler } from 'VestReconciler';\nimport { useCreateSuiteResult } from 'suiteResult';\nimport { useSuiteRunResult } from 'suiteRunResult';\nimport { bindSuiteSelectors } from 'suiteSelectors';\nimport { validateSuiteCallback } from 'validateSuiteParams';\n\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteName: SuiteName, suiteCallback: T): Suite<F, G, T>;\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteCallback: T): Suite<F, G, T>;\n// @vx-allow use-use\n// eslint-disable-next-line max-lines-per-function\nfunction createSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(\n  ...args: [suiteName: SuiteName, suiteCallback: T] | [suiteCallback: T]\n): Suite<F, G, T> {\n  const [suiteCallback, suiteName] = args.reverse() as [T, SuiteName];\n\n  validateSuiteCallback(suiteCallback);\n\n  // Create a stateRef for the suite\n  // It holds the suite's persisted values that may remain between runs.\n  const stateRef = useCreateVestState({ suiteName, VestReconciler });\n\n  function suite(...args: Parameters<T>): SuiteRunResult<F, G> {\n    return SuiteContext.run(\n      {\n        suiteParams: args,\n      },\n      () => {\n        Bus.useEmit(Events.SUITE_RUN_STARTED);\n\n        return IsolateSuite(\n          useRunSuiteCallback<T, F, G>(suiteCallback, ...args),\n        );\n      },\n    ).output;\n  }\n\n  const mountedStatic = staticSuite<F, G, T>(...(args as [T]));\n\n  // Assign methods to the suite\n  // We do this within the VestRuntime so that the suite methods\n  // will be bound to the suite's stateRef and be able to access it.\n  return VestRuntime.Run(stateRef, () => {\n    // @vx-allow use-use\n    const VestBus = useInitVestBus();\n\n    return assign(\n      // We're also binding the suite to the stateRef, so that the suite\n      // can access the stateRef when it's called.\n      VestRuntime.persist(suite),\n      {\n        dump: VestRuntime.persist(\n          () => VestRuntime.useAvailableRoot() as TIsolateSuite,\n        ),\n        get: VestRuntime.persist(useCreateSuiteResult),\n        remove: Bus.usePrepareEmitter<string>(Events.REMOVE_FIELD),\n        reset: Bus.usePrepareEmitter(Events.RESET_SUITE),\n        resetField: Bus.usePrepareEmitter<string>(Events.RESET_FIELD),\n        resume: VestRuntime.persist(useLoadSuite),\n        runStatic: (...args: Parameters<T>): StaticSuiteRunResult<F, G> =>\n          mountedStatic(...args) as StaticSuiteRunResult<F, G>,\n        subscribe: VestBus.subscribe,\n        ...bindSuiteSelectors<F, G>(VestRuntime.persist(useCreateSuiteResult)),\n        ...getTypedMethods<F, G>(),\n      },\n    );\n  });\n}\n\nfunction useRunSuiteCallback<\n  T extends CB,\n  F extends TFieldName,\n  G extends TGroupName,\n>(suiteCallback: T, ...args: Parameters<T>): CB<SuiteRunResult<F, G>> {\n  const emit = Bus.useEmit();\n\n  return () => {\n    suiteCallback(...args);\n    emit(Events.SUITE_CALLBACK_RUN_FINISHED);\n    return useSuiteRunResult<F, G>();\n  };\n}\n\n/**\n * Creates a static suite for server-side validation.\n *\n * @param {Function} validationFn - The validation function that defines the suite's tests.\n * @returns {Function} - A function that runs the validations defined in the suite.\n *\n * @example\n * import { staticSuite, test, enforce } from 'vest';\n *\n * const suite = staticSuite(data => {\n *   test('username', 'username is required', () => {\n *     enforce(data.username).isNotEmpty();\n *   });\n * });\n *\n * suite(data);\n */\n\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteName: SuiteName, suiteCallback: T): StaticSuite<F, G, T>;\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(suiteCallback: T): StaticSuite<F, G, T>;\n// @vx-allow use-use\n// eslint-disable-next-line max-lines-per-function\nfunction staticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n>(\n  ...createArgs: [suiteName: SuiteName, suiteCallback: T] | [suiteCallback: T]\n): StaticSuite<F, G, T> {\n  return assign(\n    (...args: Parameters<T>): StaticSuiteRunResult<F, G> => {\n      const suite = createSuite<F, G, T>(\n        ...(createArgs as unknown as [SuiteName, T]),\n      );\n\n      const result = suite(...args);\n\n      return Object.freeze(\n        assign(\n          {\n            dump: suite.dump,\n          },\n          result,\n        ),\n      ) as StaticSuiteRunResult<F, G>;\n    },\n    {\n      ...getTypedMethods<F, G>(),\n    },\n  );\n}\n\nexport type StaticSuite<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n  T extends CB = CB,\n> = (...args: Parameters<T>) => StaticSuiteRunResult<F, G>;\n\nexport type StaticSuiteRunResult<\n  F extends TFieldName = string,\n  G extends TGroupName = string,\n> = SuiteRunResult<F, G> & {\n  dump: CB<TIsolateSuite>;\n} & TTypedMethods<F, G>;\n\nexport { createSuite, staticSuite };\n","import { CB, invariant, isFunction } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\n\n\n\nexport function validateSuiteCallback<T extends CB>(\n  suiteCallback: T\n): asserts suiteCallback is T {\n  invariant(\n    isFunction(suiteCallback),\n    ErrorStrings.SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION\n  );\n}\n","import { invariant, isFunction } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { IsolateEach } from 'IsolateEach';\n\n/**\n * Iterates over an array of items, allowing to run tests individually per item.\n *\n * Requires setting a \"key\" property on each item tested.\n *\n * @example\n *\n * each(itemsArray, (item) => {\n *  test(item.name, 'Item value must not be empty', () => {\n *    enforce(item.value).isNotEmpty();\n *  }, item.id)\n * })\n */\nexport function each<T>(\n  list: T[],\n  callback: (arg: T, index: number) => void\n): void {\n  invariant(\n    isFunction(callback),\n    ErrorStrings.EACH_CALLBACK_MUST_BE_A_FUNCTION\n  );\n\n  IsolateEach(() => {\n    list.forEach((arg, index) => {\n      callback(arg, index);\n    });\n  });\n}\n","import { CB } from 'vest-utils';\nimport { TIsolate, Isolate } from 'vestjs-runtime';\n\nimport { VestIsolateType } from 'VestIsolateType';\n\ntype TIsolateEach = TIsolate;\n\nexport function IsolateEach<Callback extends CB = CB>(\n  callback: Callback\n): TIsolateEach {\n  return Isolate.create(VestIsolateType.Each, callback, {\n    allowReorder: true,\n  });\n}\n","import { invariant } from 'vest-utils';\n\nimport { ErrorStrings } from 'ErrorStrings';\nimport { useCurrentTest } from 'SuiteContext';\nimport { VestTest } from 'VestTest';\n\nconst ERROR_OUTSIDE_OF_TEST = ErrorStrings.WARN_MUST_BE_CALLED_FROM_TEST;\n\n/**\n * Sets the severity level of a test to `warn`, allowing it to fail without marking the suite as invalid.\n * Use this function within the body of a test to create warn-only tests.\n *\n * @returns {void}\n *\n * @example\n *   test('password', 'Your password strength is: WEAK', () => {\n *     warn();\n *\n *     enforce(data.password).matches(/0-9/);\n *   });\n *\n * @limitations\n * - The `warn` function should only be used within the body of a `test` function.\n * - When using `warn()` in an async test, it should be called in the synchronous portion of the test, not after an `await` call or in the Promise body.\n * - It is recommended to call `warn()` at the top of the test function.\n */\n// @vx-allow use-use\nexport function warn(): void {\n  const currentTest = useCurrentTest(ErrorStrings.HOOK_CALLED_OUTSIDE);\n\n  invariant(currentTest, ERROR_OUTSIDE_OF_TEST);\n\n  VestTest.warn(currentTest);\n}\n"],"names":["VestIsolateType","SuiteOptionalFields","static","suite","fieldName","setter","current","data","optional","currentField","assign","_a","getOptionalFields","_b","OptionalFieldTypes","Modes","SuiteContext","createCascade","ctxRef","parentContext","inclusion","mode","tinyState","createTinyState","EAGER","suiteParams","testMemoCache","useInclusion","useX","useMode","cache","optionals","suiteRoot","VestRuntime","useAvailableRoot","dataObject","isArray","isStringValue","asArray","forEach","optionalField","setOptionalField","type","AUTO","applied","hasOwnProperty","enforce","isBlank","test","rule","field","value","CUSTOM_LOGIC","useIsOptionalFieldApplied","root","getOptionalField","ErrorStrings","CommonStates","State","CommonStates_PENDING","CommonStates_INITIAL","DONE","transition","from","to","CommonStateMachine","staticTransition","INITIAL","StateMachine","initial","states","PENDING","TestStatus","CANCELED","FAILED","OMITTED","PASSING","SKIPPED","UNTESTED","WARNING","TestAction","IsolateTestStateMachine","TestAction_RESET","force","Severity","SeverityCount","TestSeverity","FocusModes","countKeyBySeverity","severity","ERRORS","ERROR_COUNT","WARN_COUNT","VestIsolate","isolate","status","payload","this","stateMachine","getStatus","setStatus","statusEquals","VestTest","invariant","IsolateSelectors","isIsolateType","is","EXPECTED_VEST_TEST","isX","getData","Warning","isFailing","isWarning","isSkipped","isOmitted","isCanceled","hasFailures","isPassing","isUntested","isPending","isPromise","asyncTest","warns","setData","optionalFunctionValue","IsolateMutator","abort","nonMatchingFieldName","WithFieldName","matchingFieldName","isSameProfileTest","testObject1","testObject2","groupName","gn1","gn2","fn2","key","IsolateFocused","focusMode","match","Isolate","create","noop","filter","matchAll","FocusSelectors","focus","SKIP","hasFocus","ONLY","only","defaultMatch","skip","isNotEmpty","includes","suiteResultCache","useXAppData","useDoneCallbacks","doneCallbacks","useFieldCallbacks","fieldCallbacks","useSuiteId","suiteId","useExpireSuiteResultCache","invalidate","useResetCallbacks","resetDoneCallbacks","resetFieldCallbacks","useLoadSuite","rootNode","useLoadRootNode","gatherFailures","testGroup","severityKey","getByFieldName","output","countKey","isPositive","collectAll","suiteSelectors","summary","selectors","getError","getFailure","getErrors","getFailures","getErrorsByGroup","getFailuresByGroup","getWarning","WARNINGS","getWarnings","getWarningsByGroup","hasErrors","hasErrorsByGroup","hasFailuresByGroup","hasWarnings","hasWarningsByGroup","greaterThan","tests","pendingCount","isTested","testCount","isValid","Boolean","valid","isValidByGroup","group","groups","isFieldValid","testContainer","severityCount","failureCount","summaryKey","find","summaryFailure","message","SummaryBase","constructor","errorCount","warnCount","SuiteSummary","SummaryFailure","testObject","TestWalker","defaultRoot","Walker","has","predicate","some","every","callback","walk","breakout","cast","pluck","walkTests","reset","pluckTests","SuiteWalker","Predicates","all","hasPending","any","isNullish","matchesOrHasNoFieldName","nonMatchingGroupName","bindNot","hasErrorsByTestObjects","someTests","hasFailuresByTestObject","hasFailuresByTestObjects","either","nonMatchingSeverityProfile","useShouldAddValidProperty","hasNoTests","useHasNonOptionalIncomplete","everyTest","useNoMissingTestsLogic","useNoMissingTests","useShouldAddValidPropertyInGroup","hasGroupFailuresByTestObjects","useHasNonOptionalIncompleteByGroup","useNoMissingTestsByGroup","awaitsResolution","useOptionalTestAwaitsResolution","useProduceSuiteSummary","newTests","Object","appendTestObject","useAppendToTest","newGroups","useAppendToGroup","errors","appendFailures","warnings","countOverallStates","failures","concat","fromTestObject","nextSummaryKey","defaultTo","baseTestStats","isNonActionable","incrementFailures","useCreateSuiteResult","action","suiteName","freeze","skipWhen","condition","run","skipped","useIsExcludedIndividually","useSkipped","useHasOnliedTests","isNotNullish","findClosest","child","isIsolateFocused","isOnlyFocused","useIsExcluded","focusMatch","useClosestMatchingFocus","isSkipFocused","setMode","useIsMode","currentMode","useShouldSkipBasedOnMode","testData","ONE","omitWhen","conditional","omitted","useWithinActiveOmitWhen","useOmitted","useVerifyTestRun","collisionResult","testNode","omit","omitTestAndReturn","useForceSkipIfInSkipWhen","nodeReorderDetected","newNode","prevNode","reconcilers","currentNode","historyNode","nextNode","IsolateInspector","usesKey","Reconciler","handleIsolateNodeWithKey","useHandleTestWithKey","dropNextNodesOnReorder","canReorder","deferThrow","text","TESTS_CALLED_IN_DIFFERENT_ORDER","prevName","undefined","throwTestOrderError","usePickNode","prevTestObject","currentRunTestObject","prevRunTestObject","cancel","cancelOverriddenPendingTestOnTestReRun","registerReconciler","reconciler","push","VestReconciler","reconcile","args","reverse","include","when","INCLUDE_SELF","Events","IsolateTest","input","Error","testFn","useAttemptRunTest","result","currentTest","signal","abortController","error","isUndefined","shouldUseErrorAsMessage","fail","runSyncTest","done","persist","onTestCompleted","rejectionMessage","then","useRunAsyncTest","e","UNEXPECTED_TEST_REGISTRATION_ERROR","JSON","stringify","useRunTest","pass","vestTest","isFunction","fnName","INVALID_PARAM_PASSED_TO_FUNCTION","fn_name","param","expected","validateTestParams","testObjectInput","Bus","useEmit","TEST_RUN_STARTED","memo","deps","msg","dependencies","cacheAction","cached","get","isNull","cachedValue","addNodeToHistory","useGetTestFromCache","Runtime.useSuiteId","useCurrentCursor","wrapTestMemo","getTypedMethods","useOmitOptionalFields","optionalFields","isEmpty","shouldOmit","Set","verifyAndOmit","optionalConfig","add","runOptionalConfig","DONE_TEST_OMISSION_PASS","useInitVestBus","VestBus","useBus","on","TEST_COMPLETED","hasRemainingWithTestNameMatching","callEach","useRunFieldCallbacks","RuntimeEvents","ISOLATE_PENDING","setPending","CommonStateMachine.setPending","ISOLATE_DONE","emit","CommonStateMachine.setDone","ALL_RUNNING_TESTS_FINISHED","isAsyncTest","useRunDoneCallbacks","RESET_FIELD","resetField","SUITE_RUN_STARTED","SUITE_CALLBACK_RUN_FINISHED","REMOVE_FIELD","removeTestByFieldName","RESET_SUITE","subscribe","cb","off","event","useSuiteRunResult","numberEquals","shouldSkipDoneRegistration","useDoneCallback","doneCallback","setFieldCallbacks","setDoneCallbacks","useDeferDoneCallback","createSuite","suiteCallback","SUITE_MUST_BE_INITIALIZED_WITH_FUNCTION","validateSuiteCallback","stateRef","seq","createRef","useCreateVestState","useRunSuiteCallback","mountedStatic","staticSuite","Run","dump","remove","usePrepareEmitter","resume","runStatic","createArgs","each","list","EACH_CALLBACK_MUST_BE_A_FUNCTION","allowReorder","IsolateEach","arg","index","ERROR_OUTSIDE_OF_TEST","WARN_MUST_BE_CALLED_FROM_TEST","warn","HOOK_CALLED_OUTSIDE"],"mappings":"4uBAAO,MAAMA,EACL,OADKA,EAEF,UAFEA,EAGJ,QAHIA,EAID,WAJCA,EAKD,WALCA,EAMJ,QANIA,EAOL,aCYKC,EACXC,wBACEC,EACAC,EACAC,GAEA,MAAMC,EAAUH,EAAMI,KAAKC,SACrBC,EAAeH,EAAQF,GAE7BM,EAAOJ,EAAS,CACdF,CAACA,GAAYM,EAAO,CAAA,EAAID,EAAcJ,EAAOI,KAEhD,CAEDP,wBACEC,EACAC,SAEA,OAAkE,QAA3DO,EAAAV,EAAoBW,kBAAkBT,GAAOC,UAAc,IAAAO,EAAAA,EAAA,CAAA,CACnE,CAEDT,yBAAyBC,WACvB,OAA+B,QAAxBU,EAAY,UAAZV,EAAMI,YAAM,IAAAI,OAAA,EAAAA,EAAAH,gBAAY,IAAAK,EAAAA,EAAA,EAChC,ECZH,IAAYC,EC9BAC,GD8BZ,SAAYD,GACVA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,KAAA,GAAA,MACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,ICjCD,SAAYC,GACVA,EAAA,MAAA,QACAA,EAAA,IAAA,MACAA,EAAA,IAAA,KACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,ICSM,MAAMC,EAAeC,GAAuB,CAACC,EAAQC,IACtDA,EACK,KAGFT,EACL,CACEU,UAAW,CAAE,EACbC,KAAMC,EAAUC,gBAAuBR,EAAMS,OAC7CC,YAAa,GACbC,kBAEFR,cAuBYS,IACd,OAAOX,EAAaY,OAAOR,SAC7B,UAEgBS,IACd,OAAOb,EAAaY,OAAOP,MAC7B,CAUA,MAAMK,GAAgBI,EAAoB,ICtDpC,SAAUtB,GACduB,SAEA,MAAMC,EAAYC,EAAYC,mBAExBT,EDwDCT,EAAaY,OAAOH,YCvDrBU,EAA6B,QAAhBxB,EAAAc,aAAA,EAAAA,EAAc,UAAE,IAAAd,EAAAA,EAAI,GAgBvC,GAAIyB,EAAQL,IAAcM,EAAcN,GACtCO,EAAQP,GAAWQ,SAAQC,IACzBvC,EAAoBwC,iBAAiBT,EAAWQ,GAAe,KAAO,CACpEE,KAAM5B,EAAmB6B,KACzBC,UAASC,EAAeV,EAAYK,IAChCM,EAAQC,UAAUC,KAAKb,aAAA,EAAAA,EAAaK,IAExCS,KAAM,QACL,SAIL,IAAK,MAAMC,KAASnB,EAAW,CAC7B,MAAMoB,EAAQpB,EAAUmB,GAExBjD,EAAoBwC,iBAAiBT,EAAWkB,GAAO,KAAO,CAC5DR,KAAM5B,EAAmBsC,aACzBH,KAAME,EACNP,QAASE,EAAQC,UAAUC,KAAKG,KAAoB,IAAVA,KAE7C,CAEL,CAEM,SAAUE,GAA0BjD,WACxC,IAAKA,EACH,OAAO,EAGT,MAAMkD,EAAOrB,EAAYC,mBAEzB,OACoE,QAAlErB,EAAuD,QAAvDF,EAAAV,EAAoBsD,iBAAiBD,EAAMlD,UAAY,IAAAO,OAAA,EAAAA,EAAAiC,eAAW,IAAA/B,GAAAA,CAEtE,CClEA,IAAY2C,IAAZ,SAAYA,GACVA,EAAA,oBAAA,0CACAA,EAAA,mBAAA,kDACAA,EAAA,oBAAA,4BACAA,EAAA,wCAAA,4CACAA,EAAA,2BAAA,gDACAA,EAAA,4BAAA,2EACAA,EAAA,8BAAA,8DACAA,EAAA,iCAAA,sCACAA,EAAA,iCAAA,yFACAA,EAAA,gCAAA,wZAMAA,EAAA,mCAAA,+KAIAA,EAAA,0BAAA,wIAEAA,EAAA,aAAA,gDACD,CAvBD,CAAYA,KAAAA,GAuBX,CAAA,ICpBM,MAAMC,GACF,UADEA,GAEF,UAGLC,GAAQ,CACZC,CAACF,IAAuBA,GACxBG,CAACH,IAAuBA,GACxBI,KAAM,QAmBR,SAASC,GAAWC,EAAyBC,GAC3C,OAAOC,GAAmBC,iBAAiBH,QAAAA,EAAQL,GAAMS,QAASH,EACpE,CAUO,MAAMC,GAAqBG,EA1BI,CACpCC,QAASX,GAAMS,QACfG,OAAQ,CACN,CAACZ,GAAMG,MAAO,CAAE,EAChB,CAACH,GAAMS,SAAU,CACf,CAACT,GAAMa,SAAUb,GAAMa,QACvB,CAACb,GAAMG,MAAOH,GAAMG,MAEtB,CAACH,GAAMa,SAAU,CACf,CAACb,GAAMG,MAAOH,GAAMG,SCrBbW,GAAa,CACxBb,CAACF,IAAuBA,GACxBgB,SAAU,WACVC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,QAAS,UACTC,SAAU,WACVC,QAAS,WAGEC,GACJ,QA4CIC,GAA0Bb,EApC4B,CACjEC,QAASG,GAAWM,SACpBR,OAAQ,CACN,IAAK,CACH,CAACE,GAAWG,SAAUH,GAAWG,QACjCO,CAACF,IAAmBR,GAAWM,UAEjC,CAACN,GAAWM,UAAW,CACrB,CAACN,GAAWC,UAAWD,GAAWC,SAClC,CAACD,GAAWE,QAASF,GAAWE,OAEhC,CAACF,GAAWI,SAAUJ,GAAWI,QACjC,CAACJ,GAAWD,SAAUC,GAAWD,QACjC,CAACC,GAAWK,SAAUL,GAAWK,QACjC,CAACL,GAAWO,SAAUP,GAAWO,SAEnC,CAACP,GAAWD,SAAU,CACpB,CAACC,GAAWC,UAAWD,GAAWC,SAClC,CAACD,GAAWE,QAASF,GAAWE,OAEhC,CAACF,GAAWI,SAAUJ,GAAWI,QACjC,CAACJ,GAAWK,SAAU,CACpBL,GAAWK,QACVM,IAA8B,IAAVA,GAEvB,CAACX,GAAWO,SAAUP,GAAWO,SAEnC,CAACP,GAAWK,SAAU,CAAE,EACxB,CAACL,GAAWE,QAAS,CAAE,EACvB,CAACF,GAAWO,SAAU,CAAE,EACxB,CAACP,GAAWI,SAAU,CAAE,EACxB,CAACJ,GAAWC,UAAW,CAAE,EACzB,CAACD,GAAWG,SAAU,CAAE,KCxD5B,IAAYS,GAKAC,GAWAC,GChBAC,GDUN,SAAUC,GAAmBC,GACjC,OAAOA,IAAaL,GAASM,OACzBL,GAAcM,YACdN,GAAcO,UACpB,EAdA,SAAYR,GACVA,EAAA,SAAA,WACAA,EAAA,OAAA,QACD,CAHD,CAAYA,KAAAA,GAGX,CAAA,IAED,SAAYC,GACVA,EAAA,YAAA,aACAA,EAAA,WAAA,WACD,CAHD,CAAYA,KAAAA,GAGX,CAAA,IAQD,SAAYC,GACVA,EAAA,MAAA,QACAA,EAAA,QAAA,SACD,CAHD,CAAYA,KAAAA,GAGX,CAAA,UEdYO,GAGX3F,iBAAiB4F,SACf,eAAOnF,EAAAmF,EAAQC,sBAAUtC,EAC1B,CAEDvD,iBAAiB4F,EAAmBC,EAAgBC,GAClDF,EAAQC,OAASE,KAAKC,aAAahC,iBACjC2B,GAAYM,UAAUL,GACtBC,EACAC,EAEH,CAED9F,oBAAoB4F,EAAmBC,GACrC,OAAOF,GAAYM,UAAUL,KAAaC,CAC3C,CAED7F,kBAAkB4F,GAChBG,KAAKG,UAAUN,EAASrC,GACzB,CAEDvD,iBAAiB4F,GACf,OAAOD,GAAYQ,aAAaP,EAASrC,GAC1C,EAxBMoC,GAAYK,aAAqBjC,GCSpC,MAAOqC,WAAiBT,GAK5B3F,eAGE8C,GAEA,OADAuD,EAAUvD,EAAKzC,MACRyC,EAAKzC,IACb,CAEDL,UAAU4F,GACR,OAAOU,EAAiBC,cACtBX,EACA9F,EAEH,CAEDE,WAAW4F,GACTS,EAAUD,GAASI,GAAGZ,GAAUtC,GAAamD,mBAC9C,CAEDzG,YACE4F,GAGA,OADAQ,GAASM,IAAId,GACNA,CACR,CAED5F,aAAa8C,GACX,OAAOsD,GAASO,QAAQ7D,GAAMyC,WAAaH,GAAawB,OACzD,CAED5G,iBAAiB8C,GACf,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWG,QAC/C,CAEDzE,kBAAkB8C,GAChB,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWM,SAC/C,CAED5E,iBAAiB8C,GACf,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWE,OAC/C,CAEDxE,kBAAkB8C,GAChB,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWC,SAC/C,CAEDvE,iBAAiB8C,GACf,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWK,QAC/C,CAED3E,iBAAiB8C,GACf,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWI,QAC/C,CAED1E,iBAAiB8C,GACf,OAAOsD,GAASD,aAAarD,EAAMwB,GAAWO,QAC/C,CAED7E,mBAAmB8C,GACjB,OAAOsD,GAASS,UAAU/D,IAASsD,GAASU,UAAUhE,EACvD,CAED9C,uBAAuB8C,GACrB,OACEsD,GAASW,UAAUjE,IACnBsD,GAASY,UAAUlE,IACnBsD,GAASa,WAAWnE,EAEvB,CAED9C,gBAAgB8C,GACd,OAAOsD,GAASc,YAAYpE,IAASsD,GAASe,UAAUrE,EACzD,CAED9C,wBAAwB8C,GAGtB,OACEsD,GAASW,UAAUjE,IACnBsD,GAASgB,WAAWtE,IACpBsD,GAASiB,UAAUvE,EAEtB,CAED9C,mBAAmB8C,GACjB,OAAOwE,EAAUlB,GAASO,QAAQ7D,GAAMyE,UACzC,CAQDvH,YAAY8C,GACVsD,GAASF,UACPpD,EACAsD,GAASoB,MAAM1E,GAAQwB,GAAWO,QAAUP,GAAWE,OAE1D,CAEDxE,YAAY8C,GACVsD,GAASF,UAAUpD,EAAMwB,GAAWI,QACrC,CAED1E,YAAY8C,GACVsD,GAASqB,QAAQ3E,GAAM1C,kCAClBA,GAAO,CACVmF,SAAUH,GAAawB,WAE1B,CAED5G,eACE8C,EACA3C,GAIA2C,EAAKzC,KAAOqH,EAAsBvH,EAAQiG,GAASO,QAAQ7D,GAC5D,CAED9C,YAAY8C,EAAoBmC,GAW9BmB,GAASF,UAAUpD,EAAMwB,GAAWK,QAASM,EAC9C,CAEDjF,cAAc8C,GACZsD,GAASF,UAAUpD,EAAMwB,GAAWC,UACpCoD,EAAeC,MAAM9E,EAAMwB,GAAWC,SACvC,CAEDvE,YAAY8C,GACVsD,GAASF,UAAUpD,EAAMwB,GAAWG,QACrC,CAEDzE,aAAa8C,GACXsD,GAASF,UAAUpD,EAAMgC,GAC1B,ECjKa,SAAA+C,GACdC,EACA5H,GAEA,QAASA,IAAc6H,GAAkBD,EAAe5H,EAC1D,CAEc,SAAU6H,GACtBD,EACA5H,GAEA,SAAUA,GAAa4H,EAAc5H,YAAcA,EACrD,CCbgB,SAAA8H,GACdC,EACAC,GAEA,MAAQC,UAAWC,GAAQhC,GAASO,QAAQsB,IACpCE,UAAWE,EAAKnI,UAAWoI,GAAQlC,GAASO,QAAQuB,GAC5D,OACEH,GAAkB3B,GAASO,QAAQsB,GAAcK,IACjDF,IAAQC,GAGRJ,EAAYM,KAAOL,EAAYK,GAEnC,CCUgB,SAAAC,GACdC,EACAC,GAEA,OAAOC,EAAQC,OAAO9I,EAAyB+I,EAAM,CACnDJ,YACAC,MAAOtG,EAAQsG,GAAOI,OAAO3G,GAC7B4G,UAAoB,IAAVL,GAEd,CHpBStC,GAAYJ,aAAGjB,GFhBxB,SAAYM,GACVA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,MACD,CAHD,CAAYA,KAAAA,GAGX,CAAA,UKmCY2D,GACXhJ,qBACEiJ,EACA/I,GAEA,OACE+I,aAAA,EAAAA,EAAO5I,KAAKoI,aAAcpD,GAAW6D,OACpCC,GAASF,EAAO/I,KAAsC,IAAxB+I,EAAM5I,KAAK0I,SAE7C,CACD/I,qBACEiJ,EACA/I,GAEA,OACE+I,aAAA,EAAAA,EAAO5I,KAAKoI,aAAcpD,GAAW+D,MAAQD,GAASF,EAAO/I,EAEhE,CAEDF,wBAAwB4F,GACtB,OAAOU,EAAiBC,cAAcX,EAAS9F,EAChD,EAWG,SAAUuJ,GAAKX,GACnB,OAAOF,GAAenD,GAAW+D,KAAME,GAAaZ,GACtD,CASM,SAAUa,GAAKb,GACnB,OAAOF,GAAenD,GAAW6D,KAAMI,GAAaZ,GACtD,CAEA,SAASY,GAAaZ,GACpB,OAAiB,IAAVA,EAAkB,GAAKA,CAChC,CAEA,SAASS,GAASF,EAAkC/I,WAClD,OACEsJ,EAAWP,aAAA,EAAAA,EAAO5I,KAAKqI,UACtBxI,IAAsD,QAA1CS,EAAiB,QAAjBF,EAAAwI,aAAK,EAALA,EAAO5I,KAAKqI,aAAK,IAAAjI,OAAA,EAAAA,EAAEgJ,SAASvJ,UAAc,IAAAS,GAAAA,GAE3D,CChEA,MAAM+I,GAAmB9H,IAoBzB,SAASF,KACP,OAAOK,EAAY4H,aACrB,UAEgBC,KACd,OAAOlI,KAAOmI,eAChB,UAEgBC,KACd,OAAOpI,KAAOqI,gBAChB,UAMgBC,KACd,OAAOtI,KAAOuI,OAChB,UAUgBC,KACWxI,KAAOgI,iBACfS,WAAW,CAACH,MAC/B,UAEgBI,KACd,MAAW,CAAA,CAAAC,GAAsBT,MACtB,CAAA,CAAAU,GAAuBR,KAElCO,IACAC,GACF,CAOM,SAAUC,GAAaC,GAC3BzI,EAAY0I,gBAAgBD,GAC5BN,IACF,UCvFgBQ,GACdC,EACAC,EACA1K,GAEA,OAAOA,EAKT,SACEyK,EACAC,EACA1K,SAEA,OAAgC,QAAzBO,EAAAkK,aAAA,EAAAA,EAAYzK,UAAa,IAAAO,OAAA,EAAAA,EAAAmK,KAAgB,EAClD,CAVMC,CAAeF,EAAWC,EAAa1K,GAY7C,SACEyK,EACAC,GAEA,MAAME,EAA0B,CAAA,EAE1BC,EAAWzF,GAAmBsF,GAEpC,IAAK,MAAM5H,KAAS2H,EACdK,EAAWL,EAAU3H,GAAO+H,MAG9BD,EAAO9H,GAAS2H,EAAU3H,GAAO4H,IAAgB,IAIrD,OAAOE,CACT,CA5BMG,CAAWN,EAAWC,EAC5B,CCsCM,SAAUM,GACdC,GAEA,MAAMC,EAAY,CAChBC,SAqGF,SAAkBnL,GAChB,OAAOoL,GAAiBpG,GAASM,OAAQ2F,EAASjL,EACnD,EAtGCqL,UA8FF,SAAmBrL,GACjB,OAAOsL,GAAYL,EAASjG,GAASM,OAAQtF,EAC9C,EA/FCuL,iBAyGF,SAA0BtD,EAAcjI,GACtC,OAAOwL,GAAmBP,EAASjG,GAASM,OAAQ2C,EAAWjI,EAChE,EA1GCyL,WAsFF,SAAoBzL,GAClB,OAAOoL,GAAiBpG,GAAS0G,SAAUT,EAASjL,EACrD,EAvFC2L,YA+EF,SAAqB3L,GACnB,OAAOsL,GAAYL,EAASjG,GAAS0G,SAAU1L,EAChD,EAhFC4L,mBA4GF,SACE3D,EACAjI,GAEA,OAAOwL,GAAmBP,EAASjG,GAAS0G,SAAUzD,EAAWjI,EAClE,EAhHC6L,UAyCF,SAAmB7L,GACjB,OAAOgH,GAAYiE,EAAShG,GAAcM,YAAavF,EACxD,EA1CC8L,iBA4DF,SACE7D,EACAjI,GAEA,OAAO+L,GACLd,EACAhG,GAAcM,YACd0C,EACAjI,EAEH,EArECgM,YAmCF,SAAqBhM,GACnB,OAAOgH,GAAYiE,EAAShG,GAAcO,WAAYxF,EACvD,EApCCiM,mBA8CF,SACEhE,EACAjI,GAEA,OAAO+L,GACLd,EACAhG,GAAcO,WACdyC,EACAjI,EAEH,EAvDCmH,UA8GF,SAAmBnH,SACjB,OACIkM,EADGlM,EACiC,QAAxBO,EAAA0K,EAAQkB,MAAMnM,UAAU,IAAAO,OAAA,EAAAA,EAAE6L,aAC1BnB,EAAQmB,aADgC,EAEzD,EAjHCC,SAwCF,SAAkBrM,SAChB,OAAO8K,EAAmC,QAAxBvK,EAAA0K,EAAQkB,MAAMnM,UAAU,IAAAO,OAAA,EAAAA,EAAE+L,UAC7C,EAzCCC,QAQF,SAAiBvM,SACf,OAAOA,EAAYwM,QAAgC,QAAxBjM,EAAA0K,EAAQkB,MAAMnM,UAAU,IAAAO,OAAA,EAAAA,EAAEkM,OAASxB,EAAQwB,KACvE,EATCC,eAWF,SAAwBzE,EAAcjI,GACpC,MAAM2M,EAAQ1B,EAAQ2B,OAAO3E,GAE7B,IAAK0E,EACH,OAAO,EAGT,GAAI3M,EACF,OAAO6M,GAAaF,EAAO3M,GAE7B,IAAK,MAAMA,KAAa2M,EACtB,IAAKE,GAAaF,EAAO3M,GACvB,OAAO,EAIX,OAAO,CACR,GAzBD,OAAOkL,CA6GT,CA0CA,SAASI,GACPL,EACAP,EACA1K,GAEA,OAAOwK,GAAeS,EAAQkB,MAAOzB,EAAa1K,EACpD,CAIA,SAASwL,GACPP,EACAP,EACAzC,EACAjI,GAEA,OAAOwK,GAAeS,EAAQ2B,OAAO3E,GAAYyC,EAAa1K,EAChE,CAEA,SAAS6M,GACPC,EACA9M,SAEA,SAAiC,QAAxBO,EAAAuM,EAAc9M,UAAU,IAAAO,OAAA,EAAAA,EAAEkM,MACrC,CAIA,SAASV,GACPd,EACA8B,EACA9E,EACAjI,WAEA,MAAM2M,EAAQ1B,EAAQ2B,OAAO3E,GAE7B,IAAK0E,EACH,OAAO,EAGT,GAAI3M,EACF,OAAO8K,EAA8B,QAAnBvK,EAAAoM,EAAM3M,UAAa,IAAAO,OAAA,EAAAA,EAAAwM,IAGvC,IAAK,MAAMjK,KAAS6J,EAClB,GAAI7B,EAA0B,QAAfrK,EAAAkM,EAAM7J,UAAS,IAAArC,OAAA,EAAAA,EAAAsM,IAC5B,OAAO,EAIX,OAAO,CACT,CAIA,SAAS/F,GACPiE,EACAJ,EACA7K,SAEA,MAAMgN,EAAehN,EACU,QAA3BO,EAAA0K,EAAQkB,MAAMnM,UAAa,IAAAO,OAAA,EAAAA,EAAAsK,GAC3BI,EAAQJ,IAAa,EAEzB,OAAOC,EAAWkC,EACpB,CAWA,SAAS5B,GACP/F,EACA4F,EACAjL,SAEA,MAAMiN,EAAahC,EAAQ5F,GAE3B,OAAKrF,EAOJ,UAHMiN,EAAWC,MACfC,GACCtF,GAAkBsF,EAAgBnN,YACrC,IAAAO,OAAA,EAAAA,EAAE6M,QANMH,EAAW,EAOtB,iBCzTaI,GAAbC,cACSzH,KAAU0H,WAAG,EACb1H,KAAS2H,UAAG,EACZ3H,KAASyG,UAAG,EACZzG,KAAYuG,aAAG,CACvB,EAEK,MAAOqB,WAGHJ,GAHVC,kCAISzH,KAAiBtF,IAA2B,GAC5CsF,KAAmBpF,IAA2B,GAC9CoF,KAAM+G,OAAiB,GACvB/G,KAAKsG,MAAa,GAClBtG,KAAK4G,OAAG,CAChB,EALSlM,GAAAyE,GAASM,OACT7E,GAAAuE,GAAS0G,eCdNgC,GAGXJ,YACStN,EACAoN,EACAnF,GAFApC,KAAS7F,UAATA,EACA6F,KAAOuH,QAAPA,EACAvH,KAASoC,UAATA,CACL,CAEJnI,sBACE6N,GAEA,MAAM3N,UAAEA,EAASoN,QAAEA,EAAOnF,UAAEA,GAAc/B,GAASO,QAAQkH,GAE3D,OAAO,IAAID,GAAe1N,EAAWoN,EAASnF,EAC/C,QCVU2F,GAGX9N,kBAAkBoD,EAAkB0K,GAAWC,eAC7C,OAAK3K,IACG4K,EAAOC,IAAI7K,EAAMgD,GAASI,GACnC,CAEDxG,iBACEkO,EACA9K,EAAkB0K,GAAWC,eAE7B,QAAK3K,GACE4K,EAAOG,KACZ/K,GACAwC,IACEQ,GAASM,IAAId,GAENsI,EAAUtI,KAEnBQ,GAASI,GAEZ,CAEDxG,iBACEkO,EACA9K,EAAkB0K,GAAWC,eAE7B,QAAK3K,GACE4K,EAAOI,MACZhL,GACAwC,IACEQ,GAASM,IAAId,GAENsI,EAAUtI,KAEnBQ,GAASI,GAEZ,CAEDxG,iBACEqO,EACAjL,EAAkB0K,GAAWC,eAExB3K,GACL4K,EAAOM,KACLlL,GACA,CAACwC,EAAS2I,KACRF,EAASjI,GAASoI,KAAW5I,GAAU2I,EAAS,GAElDnI,GAASI,GAEZ,CAEDxG,kBACEkO,EACA9K,EAAkB0K,GAAWC,eAExB3K,GACL4K,EAAOS,MACLrL,GACAwC,IACEQ,GAASM,IAAId,GAENsI,EAAUtI,KAEnBQ,GAASI,GAEZ,CAEDxG,kBAAkBE,GAChB4N,GAAWY,WAAUb,IACf9F,GAAkB3B,GAASO,QAAQkH,GAAa3N,IAClDkG,GAASuI,MAAMd,EAChB,GACAC,GAAWC,cACf,CAED/N,6BACEE,EACAkD,EAAkB0K,GAAWC,eAE7BD,GAAWc,YAAWf,GACb9F,GAAkB3B,GAASO,QAAQkH,GAAa3N,IACtDkD,EACJ,EApFM0K,GAAAC,YAAchM,EAAYC,uBCFtB6M,GAGX7O,kBAAkBkO,GAChB,MAAM9K,EAAOyL,GAAYd,cAEzB,QAAK3K,GAIE4K,EAAOG,KACZ/K,EACA0L,EAAWC,IAAIpJ,GAAY0B,UAAW6G,SAAAA,GAEzC,CAIDlO,wCAAwCE,GACtC,OAAO2O,GAAYG,WACjBF,EAAWG,IACTC,EAAUhP,GACV4O,EAAWC,IAAI3I,GAASI,IAAKqH,GTZrB,SACd/F,EACA5H,GAEA,OAAIA,GACK6H,GAAkBD,EAAe5H,EAG5C,CSKiBiP,CACL/I,GAASO,QAAQkH,GACjB3N,MAKT,EA7BM2O,GAAAd,YAAchM,EAAYC,iBCJ5B,MAAMoN,GAAuBC,GAEpB,SACdxB,EACA1F,GAEA,OAAO/B,GAASO,QAAQkH,GAAY1F,YAAcA,CACpD,ICEM,SAAUmH,GAAuBpP,GACrC,OAGF,SACE0K,EACA1K,GAEA,OAAO4N,GAAWyB,WAAU1B,GACnB2B,GAAwB3B,EAAYjD,EAAa1K,IAE5D,CAVSuP,CAAyBvK,GAASM,OAAQtF,EACnD,UA4BgBsP,GACd3B,EACAjD,EACA1K,GAEA,QAAKkG,GAASc,YAAY2G,MAItBhG,GAAqBzB,GAASO,QAAQkH,GAAa3N,KC7CzC,SACdqF,EACAsI,GAEA,OAAO6B,EAAOnK,IAAaL,GAAS0G,SAAUxF,GAASoB,MAAMqG,GAC/D,CD4CM8B,CAA2B/E,EAAaiD,GAK9C,CE5CM,SAAU+B,GAA0B1P,GAExC,QAAIiD,GAA0BjD,KAK1B4N,GAAW+B,gBAKXP,GAAuBpP,MAkC7B,SAAqCA,GACnC,OAAO2O,GAAYG,WACjBF,EAAWC,IACT3I,GAASI,IACRqH,IACEhG,GAAqBzB,GAASO,QAAQkH,GAAa3N,KACtD,KAAOiD,GAA0BjD,KAGvC,CAtCM4P,CAA4B5P,IA2DlC,SAA2BA,GACzB,OAAO4N,GAAWiC,WAAUlC,GACnBmC,GAAuBnC,EAAY3N,IAE9C,CA1DS+P,CAAkB/P,IAC3B,CAEgB,SAAAgQ,GACd/H,EACAjI,GAEA,QAAIiD,GAA0BjD,cFnB9B0K,EACAzC,EACAjI,GAEA,OAAO4N,GAAWyB,WAAU1B,IACtBuB,GAAqBvB,EAAY1F,IAI9BqH,GAAwB3B,EAAYjD,EAAa1K,IAE5D,CEYMiQ,CAA8BjL,GAASM,OAAQ2C,EAAWjI,MAyBhE,SACEiI,EACAjI,GAEA,OAAO2O,GAAYG,WACjBF,EAAWC,IACT3I,GAASI,IACRqH,IACEuB,GAAqBvB,EAAY1F,KACnC0F,IACEhG,GAAqBzB,GAASO,QAAQkH,GAAa3N,KACtD,KAAOiD,GAA0BjD,KAGvC,CAlCMkQ,CAAmCjI,EAAWjI,IA6CpD,SACEiI,EACAjI,GAEA,OAAO4N,GAAWiC,WAAUlC,KACtBuB,GAAqBvB,EAAY1F,IAI9B6H,GAAuBnC,EAAY3N,IAE9C,CApDSmQ,CAAyBlI,EAAWjI,GAC7C,CAqDA,SAAS8P,GACPnC,EACA3N,GAEA,QAAI2H,GAAqBzB,GAASO,QAAQkH,GAAa3N,KAerDkG,GAASY,UAAU6G,IACnBzH,GAASmG,SAASsB,IAKtB,SAAyCA,GAIvC,MAAMzK,EAAOrB,EAAYC,oBAEnB9B,UAAEA,GAAckG,GAASO,QAAQkH,GAEvC,OACE9N,EAAoBsD,iBAAiBD,EAAMlD,GAAWsC,OACpD5B,EAAmB6B,MAAQ2D,GAASkK,iBAAiBzC,EAE3D,CAhBI0C,CAAgC1C,GAEpC,UCrHgB2C,KAId,MAAMrF,EAA8B,IAAIwC,GAmBxC,OAjBAG,GAAWY,WAAgBb,IACzB1C,EAAQkB,MAuCZ,SACEA,EACAwB,GAEA,MAAM3N,EAAYkG,GAASO,QAAWkH,GAAY3N,UAE5CuQ,EAAQC,OAAAlQ,OAAA,CAAA,EACT6L,GAUL,OAPAoE,EAASvQ,GAAayQ,GAAiBF,EAASvQ,GAAY2N,GAE5D4C,EAASvQ,GAAWyM,OACY,IAA9B8D,EAASvQ,GAAWyM,OAEhBiD,GAA0B1P,GAEzBuQ,CACT,CAzDoBG,CAAgBzF,EAAQkB,MAAOwB,GAC/C1C,EAAQ2B,OA6DZ,SACEA,EACAe,GAEA,MAAM1F,UAAEA,EAASjI,UAAEA,GAAckG,GAASO,QAAQkH,GAElD,IAAK1F,EACH,OAAO2E,EAGT,MAAM+D,EAASH,OAAAlQ,OAAA,CAAA,EACVsM,GAcL,OAXA+D,EAAU1I,GAAa0I,EAAU1I,IAAc,CAAA,EAC/C0I,EAAU1I,GAAWjI,GAAayQ,GAChCE,EAAU1I,GAAWjI,GACrB2N,GAGFgD,EAAU1I,GAAWjI,GAAWyM,OACY,IAA1CkE,EAAU1I,GAAWjI,GAAWyM,OAE5BuD,GAAiC/H,EAAWjI,GAE3C2Q,CACT,CAvFqBC,CAAiB3F,EAAQ2B,OAAQe,GAClD1C,EAAQ4F,OAASC,GACf9L,GAASM,OACT2F,EAAQ4F,OACRlD,GAEF1C,EAAQ8F,SAAWD,GACjB9L,GAAS0G,SACTT,EAAQ8F,SACRpD,EACD,IAGH1C,EAAQwB,MAAQiD,KA+ElB,SACEzE,GAEA,IAAK,MAAMrI,KAAQqI,EAAQkB,MACzBlB,EAAQsC,YAActC,EAAQkB,MAAMvJ,GAAM2K,WAC1CtC,EAAQuC,WAAavC,EAAQkB,MAAMvJ,GAAM4K,UACzCvC,EAAQqB,WAAarB,EAAQkB,MAAMvJ,GAAM0J,UACzCrB,EAAQmB,cAAgBnB,EAAQkB,MAAMvJ,GAAMwJ,aAE9C,OAAOnB,CACT,CAvFS+F,CAAmB/F,EAC5B,CAEA,SAAS6F,GACPzI,EACA4I,EACAtD,GAEA,GAAIzH,GAASY,UAAU6G,GACrB,OAAOsD,EAQT,OAJE5I,IAAQrD,GAAS0G,SACbxF,GAASU,UAAU+G,GACnBzH,GAASS,UAAUgH,IAGhBsD,EAASC,OAAOxD,GAAeyD,eAAexD,IAEhDsD,CACT,CAwEA,SAASR,GACPxD,EACAU,GAEA,MAAMP,QAAEA,GAAYlH,GAASO,QAAQkH,GAG/ByD,EAAiBC,EACrBpE,EAAYuD,OAAAlQ,OAAA,CAAA,EAAM2M,GAAe,KACjCqE,IAIF,OAAIpL,GAASqL,gBAAgB5D,KAGzBzH,GAASiB,UAAUwG,IACrByD,EAAehF,eAIblG,GAASS,UAAUgH,GACrB6D,EAAkBxM,GAASM,QAClBY,GAASU,UAAU+G,IAE5B6D,EAAkBxM,GAAS0G,UAI7B0F,EAAe9E,aAhBkC8E,EAqBjD,SAASI,EAAkBnM,GACzB,MAAMwF,EAAWzF,GAAmBC,GACpC+L,EAAevG,KACXuC,IACFgE,EAAe/L,IAAa+L,EAAe/L,IAAa,IAAI6L,OAC1D9D,GAGL,CACH,CAEA,SAASkE,KACP,OAAOhR,EAAO,IAAI+M,GAAe,CAC/BwD,OAAQ,GACRpE,OAAO,EACPsE,SAAU,IAEd,UCrLgBU,KAId,OZ4DAC,EY5DiC,KAE/B,MAAMzG,EAAUqF,KAGVqB,EZ+CDnQ,KAAOmQ,UY9CZ,OAAOnB,OAAOoB,OACZtR,EAAO2K,EAASD,GAAqBC,GAAU,CAC7C0G,cAEkB,GZsDjBnI,EAFkBhI,KAAOgI,kBAER,CAACM,MAAe4H,GALpC,IACJA,CYhDF,CCJgB,SAAAG,GACdC,EACA3D,GAEA1F,EAAQC,OAAO9I,GAA0B,KACvCgB,EAAamR,IACX,CACEC,QAGEC,MAEAzK,EACEsK,EACAtK,EAAsBiK,MAG5BtD,EACD,GAEL,UAEgB8D,KACd,wBzBeA,OAAsC,QAA/B1R,EAAAK,EAAaY,OAAOwQ,eAAW,IAAAzR,GAAAA,CACxC,CyBhBS2R,EACT,CCjCgB,SAAAC,GACdxE,EACA3N,GAEA,OAAOoS,EACLtE,EAAOuE,YAAY1E,GAAa2E,KACzBxJ,GAAeyJ,iBAAiBD,IAE9BxJ,GAAe0J,cAAcF,EAAOtS,KAGjD,CCEM,SAAUyS,GAAc9E,GAC5B,MAAM3N,UAAEA,GAAckG,GAASO,QAAQkH,GAEvC,GAAIsE,KAA6B,OAAO,EACxC,MAAMjR,EAAYO,IACZmR,EAjBR,SACE/E,GAEA,OAAOG,EAAOuE,YAAY1E,GAAa2E,UACrC,IAAKxJ,GAAeyJ,iBAAiBD,GAAQ,OAAO,EAEpD,MAAMtS,UAAEA,GAAckG,GAASO,QAAQkH,GAEvC,OAAyB,QAAlBpN,EAAA+R,EAAMnS,KAAKqI,aAAO,IAAAjI,OAAA,EAAAA,EAAAgJ,SAASvJ,KAAcsS,EAAMnS,KAAK0I,QAAQ,GAEvE,CAOqB8J,CAAwBhF,GAG3C,GAAI7E,GAAe8J,cAAcF,GAAa,OAAO,EAGrD,OAFuB5J,GAAe0J,cAAcE,OAKhDP,GAAkBxE,KAEZnG,EAAsBxG,EAAUhB,GAAY2N,GAKxD,CCjBM,SAAU1M,GAAKA,GACnB,MAAS,CAAA4R,GAAWpR,IAEpBoR,EAAQ5R,EACV,CAEA,SAAS6R,GAAU7R,GACjB,MAAO8R,GAAetR,IAEtB,OAAOsR,IAAgB9R,CACzB,CAUM,SAAU+R,GAAyBC,GACvC,OAJOH,GAAUnS,EAAMuS,KAKd9D,OATF0D,GAAUnS,EAAMS,QAadgO,GAAuB6D,EAASjT,UAI3C,CCrCgB,SAAAmT,GACdC,EACAjF,GAEA1F,EAAQC,OAAO9I,GAA0B,KACvCgB,EAAamR,IACX,CACEsB,QACEC,MACA9L,EACE4L,EACA5L,EAAsBiK,MAG5BtD,EACD,GAEL,UAGgBmF,KACd,wB7BoBA,OAAsC,QAA/B/S,EAAAK,EAAaY,OAAO6R,eAAW,IAAA9S,GAAAA,CACxC,C6BrBSgT,EACT,UChCgBC,GACd7F,EACA8F,EAAgC9F,GAEhC,MAAMsF,EAAW/M,GAASO,QAAQkH,GAElC,OAAIqF,GAAyBC,IAmBJS,EAlBE/F,EAmB3BzH,GAASmD,KAAKqK,GACPA,IANc1T,EAXHiT,EAASjT,UAYpBsT,MAA6BrQ,GAA0BjD,GAQhE,SAA2B0T,GAEzB,OADAxN,GAASyN,KAAKD,GACPA,CACT,CAtBWE,CAAkBjG,GAGvB8E,GAAc9E,GAqBpB,SAAkC+F,GAMhC,OADAxN,GAASmD,KAAKqK,EAAUzB,MACjByB,CACT,CA3BWG,CAAyBJ,GAG3B9F,GAOT,IAA2B+F,EAJJ1T,CAFvB,CCgEA,SAAS8T,GACPC,EACAC,GAEA,OAAO9N,GAASI,GAAG0N,KAAclM,GAAkBkM,EAAUD,EAC/D,CC7FA,MAAME,GAAmC,ODQvCnU,aAAaoU,EAAuBC,GAClC,OAAOjO,GAASI,GAAG4N,IAAgBhO,GAASI,GAAG6N,EAChD,CAEDrU,iBACEoU,EACAC,GAEA,MAEMC,EAAWZ,GAAiBU,EAQtC,SACEH,EACAC,GAEA,GAAIK,EAAiBC,QAAQP,GAC3B,OA8BJ,SAA8BA,GAC5B,OAAO7N,GAASoI,KACdiG,EAAWC,yBAAyBT,GAAUC,KAExC9N,GAASqL,gBAAgByC,KAIzBvB,GAAcsB,KAOxB,CA7CWU,CAAqBV,GAG9B,GACEQ,EAAWG,uBAAuBZ,GAAqBC,EAASC,GAGhE,OAyDJ,SACED,EACAC,GAEA,GAAIK,EAAiBM,WAAWZ,GAC9B,OAGFa,EACEC,EAAKzR,GAAa0R,gCAAiC,CACjD9U,UAAWkG,GAASO,QAAQsN,GAAS/T,UACrC+U,SAAU7O,GAASI,GAAG0N,GAClB9N,GAASO,QAAQuN,GAAUhU,eAC3BgV,IAGV,CA1EIC,CAAoBlB,EAASC,GACtBD,EAGT,IAAK7N,GAASI,GAAG0N,GAIf,OAAOD,EAST,GAAI7N,GAASY,UAAUkN,GACrB,OAAOD,EAGT,OAAOC,CACT,CA3C6BkB,CAAYhB,EAAaC,IAMlD,OAwDJ,SACEC,EACAF,EACAiB,GAEIf,IAAaF,GAAehO,GAASI,GAAG4N,KElF5CkB,EFmF8ClB,MEpF9CmB,EFoF8BF,IE/E5BrN,GAAkBuN,EAAmBD,IACrClP,GAASiB,UAAUkO,IAEnBnP,GAASoP,OAAOD,GATN,IACZA,EACAD,CFqFF,CAlEIG,CAAuCnB,EAAUF,EAAaC,GAEvDC,CACR,ICrBG,SAAUoB,GAAmBC,GAC7BxB,GAAY1K,SAASkM,IAIzBxB,GAAYyB,KAAKD,EACnB,CAEgB,SAAAE,GACdzB,EACAC,WAEA,OAGuD,QAFrD1T,EACiE,QADjEF,EAAA0T,GACG/G,MAAKuI,GAAcA,EAAWjN,MAAM0L,EAAaC,YAAa,IAAA5T,OAAA,EAAAA,EAC7DqV,UAAU1B,EAAoBC,UAAmB,IAAA1T,EAAAA,EAAI,IAE7D,CEZgB,SAAAkM,MACXkJ,GAEH,MAAO1H,EAAUlG,GAAa4N,EAAKC,UAEnC,OAAOrN,EAAQC,OACb9I,GACA,IACSgB,EAAamR,IAAGvB,OAAAlQ,OAAA,CAAA,EAAO2H,GAAa,CAAEA,cAAgBkG,IAGnE,CCMM,SAAU4H,GACd/V,GAIAmG,EAAUlE,EAAcjC,IAKxB,OAJkBuB,IAERvB,IAAa,EAEhB,CAAEgW,KAKT,SAAclE,GACZ3L,EAAU2L,IAAc9R,EAAWoD,GAAa6S,cAE9B1U,IAGRvB,GAAa,SACrBkU,GAEA,OAAIjS,EAAc6P,GACTK,GAAkB+B,EAAapC,GAGjCtK,EACLsK,EACAtK,EAAsBiK,IAE1B,CACD,EACH,CC/DA,IAAYyE,YCcIC,GAIdhI,EACAiI,EACA/N,GAEA,MAAMzC,EACD4K,OAAAlQ,OAAAkQ,OAAAlQ,OAAA,CAAA,EAuBE,CACL+E,SAAUH,GAAamR,MACvB1Q,OAAQd,GAAwBZ,YAzBZ,CACpBjE,UAAWoW,EAAMpW,UACjBsW,OAAQF,EAAME,SAGZF,EAAMnO,YACRrC,EAAQqC,UAAYmO,EAAMnO,WAGxBmO,EAAMhJ,UACRxH,EAAQwH,QAAUgJ,EAAMhJ,SAS1B,OAPgB3E,EAAQC,OACtB9I,EACAuO,EACAvI,EACAyC,QAAAA,EAAO,KAIX,CC/BM,SAAUkO,GAAkB5I,GAGhC,GAFA6F,GAAiB7F,GAEbzH,GAASgB,WAAWyG,GACtB,OAyCJ,SAAoBA,GAIlB,MAAM6I,EA9BR,SAAqB7I,GACnB,OAAO/M,EAAamR,IAAI,CAAE0E,YAAa9I,IAAc,KACnD,IAAI6I,EAEJ,MAAMpJ,QAAEA,EAAOkJ,OAAEA,GAAWpQ,GAASO,QAAQkH,GAE7C,IACE6I,EAASF,EAAO,CAAEI,OAAQ/I,EAAWgJ,gBAAgBD,QAMtD,CALC,MAAOE,ICrCG,SACdxJ,EACAwJ,GAGA,OAAOC,EAAYzJ,IAAYnL,EAAc2U,EAC/C,EDgCUE,CAAwB1J,EAASwJ,KACnC1Q,GAASO,QAAQkH,GAAYP,QAAUwJ,GAEzCJ,GAAS,CACV,CAMD,OAJe,IAAXA,GACFtQ,GAAS6Q,KAAKpJ,GAGT6I,CAAM,GAEjB,CASiBQ,CAAYrJ,GAC3B,IAGE,GAAIvG,EAAUoP,GAEZ,OADAtQ,GAASO,QAAQkH,GAAYtG,UAAYmP,EAqB/C,SAAyB7I,GACvB,MAAMtG,UAAEA,EAAS+F,QAAEA,GAAYlH,GAASO,QAAQkH,GAEhD,IAAKvG,EAAUC,GAAY,OAG3B,MAAM4P,EAAOpV,EAAYqV,SAAQ,KAC/BC,GAAgBxJ,EAAW,IAEvBoJ,EAAOlV,EAAYqV,SAASE,IAC5BlR,GAASa,WAAW4G,KAIxBzH,GAASO,QAAQkH,GAAYP,QAAUnL,EAAcmV,GACjDA,EACAhK,EACJlH,GAAS6Q,KAAKpJ,GAEdsJ,IAAM,IAGR,OAAO5P,EAAUgQ,KAAKJ,EAAMF,EAC9B,CA3CaO,CAAgB3J,GAGzBwJ,GAAgBxJ,EAWjB,CAVC,MAAO4J,GAIP,MAAM,IAAIlB,MACRxB,EAAKzR,GAAaoU,mCAAoC,CACpD7J,WAAY8J,KAAKC,UAAU/J,GAC3BiJ,MAAOW,IAGZ,CACH,CAlEWI,CAAWhK,GAGfzH,GAASqL,gBAAgB5D,IAI5BiH,EACEC,EAAKzR,GAAaoU,mCAAoC,CACpD7J,WAAY8J,KAAKC,UAAU/J,KAInC,CAmFA,SAASwJ,GAAgBxJ,GAGvBzH,GAAS0R,KAAKjK,EAChB,CEtFA,SAASkK,GACP7X,KACG6V,GAMH,MAAOzI,EAASkJ,EAAQjO,GACtByP,EAAWjC,EAAK,IAAMA,EAAO,MAACb,KAAca,IAqBhD,SAA4B7V,EAAmBsW,GAC7C,MAAMyB,EAAS,OACf5R,EACElE,EAAcjC,GACd6U,EAAKzR,GAAa4U,iCAAkC,CAClDC,QAASF,EACTG,MAAO,YACPC,SAAU,YAGdhS,EACE2R,EAAWxB,GACXzB,EAAKzR,GAAa4U,iCAAkC,CAClDC,QAASF,EACTG,MAAO,WACPC,SAAU,aAGhB,CApCEC,CAAmBpY,EAAWsW,GAE9B,MAEM+B,EAAkB,CAAErY,YAAWiI,UxCD9BrH,EAAaY,OAAOyG,UwCCqBmF,UAASkJ,UAKzD,OAFAgC,EAAIC,QAAQrC,GAAOsC,kBAEZrC,GAAYI,GAAmB8B,EAAiBhQ,EACzD,EJpDA,SAAY6N,GACVA,EAAA,iBAAA,mBACAA,EAAA,eAAA,iBACAA,EAAA,2BAAA,6BACAA,EAAA,aAAA,eACAA,EAAA,YAAA,cACAA,EAAA,YAAA,cACAA,EAAA,kBAAA,oBACAA,EAAA,4BAAA,8BACAA,EAAA,wBAAA,yBACD,CAVD,CAAYA,KAAAA,GAUX,CAAA,II4CY,MAAAtT,GAAOtC,EAAOuX,GAAU,CACnCY,KC3CI,SAA8C7V,GAgClD,OApBA,SACE5C,KACG6V,GAEH,MAAO6C,EAAMpC,EAAQqC,GAAO9C,EAAKC,UASjC,OAUJ,SACE8C,EACAC,GAEA,MAAMnX,EzCgBCd,EAAaY,OAAOF,cyCdrBwX,EAASpX,EAAMqX,IAAIH,GAEzB,GAAII,EAAOF,GAET,OAAOpX,EAAMkX,EAAcC,GAG7B,MAAS,CAAAI,GAAeH,EAExB,GAAI5S,GAASa,WAAWkS,GAGtB,OADAvX,EAAMuI,WAAW2O,GACVlX,EAAMkX,EAAcC,GAK7B,OAFAhX,EAAYqX,iBAAiBD,GAEtBA,CACT,CAlCWE,CANc,CACnBC,KACApZ,EACA6B,EAAYwX,oBACZnI,OAAOwH,IAIT,WACE,OAAO9V,EAAK5C,EAAW2Y,EAAKrC,EAC7B,GACF,CAGH,CDUQgD,CAAazB,eEtCL0B,KAId,MAAO,CACL5M,SACAoJ,WACA5C,YACAhK,QACA/I,YACAiJ,QACAwI,YACAjP,QAEJ,UChBgB4W,KACd,MAAMtW,EAAOrB,EAAYC,mBAEnB2X,EAAiB5Z,EAAoBW,kBAAkB0C,GAG7D,GAAIwW,EAAQD,GACV,OAIF,MAAME,EAAa,IAAIC,IAsBvB,SAASC,EAAclM,GACrB,MAAM3N,UAAEA,GAAckG,GAASO,QAAQkH,GACnCgM,EAAW5L,IAAI/N,KACjBkG,GAASyN,KAAKhG,GACd9N,EAAoBwC,iBAAiBa,EAAMlD,GAAWE,GAAWsQ,OAAAlQ,OAAAkQ,OAAAlQ,OAAA,CAAA,EAC5DJ,GACH,CAAAsC,SAAS,MAGd,CA5BDoL,GAAWY,WAAUb,IACnB,GAAIzH,GAASiB,UAAUwG,GACrB,OAEF,MAAM3N,UAAEA,GAAckG,GAASO,QAAQkH,GAInCgM,EAAW5L,IAAI/N,GACjB6Z,EAAclM,GAqBlB,SAA2BA,GACzB,MAAM3N,UAAEA,GAAckG,GAASO,QAAQkH,GAGjCmM,EAAiBja,EAAoBsD,iBACzCD,EACAlD,IAIiD,IAA/CwH,EAAsBsS,EAAejX,OACvC8W,EAAWI,IAAI/Z,GAGjB6Z,EAAclM,EACf,CAhCGqM,CAAkBrM,EACnB,IAGH2K,EAAIC,QAAQrC,GAAO+D,wBA6BrB,UCxDgBC,KACd,MAAMC,EAAU7B,EAAI8B,SA2EpB,OAvEAC,EAAGnE,GAAOoE,gBAAiB3M,IACzB,GAAIzH,GAASa,WAAW4G,GACtB,OAGF,MAAM3N,UAAEA,GAAckG,GAASO,QAAQkH,ICpBrC,SAA+B3N,GACnC,MAAO6J,GAAkBD,KAGvB5J,IACC2O,GAAY4L,iCAAiCva,IAC9CgC,EAAQ6H,EAAe7J,KAEvBwa,EAAS3Q,EAAe7J,GAE5B,CDYIya,CAAqBza,EAAU,IAGjCqa,EAAGnE,GAAOsC,kBAAkB,SAI5B6B,EAAGK,EAAcC,iBAAkBjV,IAC7BQ,GAASI,GAAGZ,IACdQ,GAAS0U,WAAWlV,GzCFpB,SAAqBA,GACzBA,EAAQC,OAASjC,GAAWgC,EAAQC,OAAQrC,GAAMa,QACpD,CyCGI0W,CAA8BnV,EAAQ,IAGxC2U,EAAGK,EAAcI,cAAepV,IAC1BQ,GAASI,GAAGZ,IACdyU,EAAQY,KAAK7E,GAAOoE,eAAgB5U,GzCdpC,SAAkBA,GACtBA,EAAQC,OAASjC,GAAWgC,EAAQC,OAAQrC,GAAMG,KACpD,CyCeIuX,CAA2BtV,GAEtBiJ,GAAYG,cAEfqL,EAAQY,KAAK7E,GAAO+E,2BACrB,IAGHZ,EAAGnE,GAAO+D,yBAAyB,SAKnCI,EAAGnE,GAAO+E,4BAA4B,KAKhCrN,GAAWyB,UAAUnJ,GAASgV,cAChC1B,gBC7CJ,MAAO7P,GAAiBD,KACxB8Q,EAAS7Q,EACX,CD6CIwR,EAAqB,IAGvBd,EAAGnE,GAAOkF,aAAcpb,IACtB4N,GAAWyN,WAAWrb,EAAU,IAGlCqa,EAAGnE,GAAOoF,mBAAmB,KAC3BpR,IAAmB,IAGrBmQ,EAAGnE,GAAOqF,6BAA6B,KACrC/B,IAAuB,IAGzBa,EAAGnE,GAAOsF,cAAexb,IACvB4N,GAAW6N,sBAAsBzb,EAAU,IAG7Cqa,EAAGnE,GAAOwF,aAAa,KhCCvBxR,KACArI,EAAY4M,OgCDK,IAGV,CACLkN,UAGF,SAAmBC,GACjB,OAAOzB,EAAQE,GAAG,KAAK,KACrBuB,GAAI,IACHC,GACJ,GAED,SAASxB,EAAGyB,EAAmBF,GAC7BzB,EAAQE,GAAGyB,GAAO,IAAIjG,KAGpB7L,KACA4R,KAAM/F,EAAK,GAEd,CACH,UEnGgBkG,KAId,OAAOvL,OAAOoB,OACZtR,EACE,CACE2W,KAAMpV,EAAYqV,QAAQD,KAE5BxF,MAGN,CAOA,SAASwF,MACJpB,GAEH,MAAO1H,EAAUnO,GAAa6V,EAAKC,UAI7BlL,EAASmR,KACf,YCxBA5N,EAEAnO,EACA4K,WAGA,UACGkN,EAAW3J,IACXnO,GAAagc,EAAmD,UAAf,QAAvBzb,EAAAqK,EAAOuB,MAAMnM,UAAU,IAAAO,OAAA,EAAAA,EAAE+L,iBAAa,IAAA7L,EAAAA,EAAA,EAAG,GAExE,CDcMwb,CAAiC9N,EAAUnO,EAAW4K,GACxD,OAAOA,EAET,MAAMsR,EAAkB,IAAM/N,EAASsD,MACvC,OAAK9C,GAAY4L,iCAAiCva,IExCpC,SACdmc,EACAnc,GAEA,MAAS,CAAAoc,GAAqBxS,MACrB,CAAAyS,GAAoB3S,KAEzB1J,EACFoc,GAAkBvS,GAChBvJ,EAAOuJ,EAAgB,CACrB7J,CAACA,IAAa6J,EAAe7J,IAAc,IAAIkR,OAAOiL,OAO5DE,GAAiB1S,GAAiBA,EAAcuH,OAAOiL,IACzD,CF0BEG,CAAqBJ,EAAiBlc,GAC/B4K,IAJLsR,IACOtR,EAIX,CGhBA,SAAS2R,MAKJ1G,GAEH,MAAO2G,EAAe7K,GAAakE,EAAKC,WCpCpC,SACJ0G,GAEArW,EACE2R,EAAW0E,GACXpZ,GAAaqZ,wCAEjB,CD+BEC,CAAsBF,GAItB,MAAMG,YrChB2BhL,UACjCA,EAASgE,eACTA,IAKA,MAAMgH,EAAuB,CAC3BhT,cAAezI,EAAUC,iBAA+B,IAAM,KAC9D0I,eAAgB3I,EAAUC,iBAAgC,KAAA,CAAS,KACnE4I,QAAS6S,IACTjL,YACAnI,qBAGF,OAAO3H,EAAYgb,UAAUlH,EAAgBgH,EAC/C,CqCAmBG,CAAmB,CAAEnL,YAAWgE,oBAEjD,SAAS5V,KAAS8V,GAChB,OAAOjV,EAAamR,IAClB,CACE1Q,YAAawU,IAEf,KAGE,OAFAyC,EAAIC,QAAQrC,GAAOoF,mBpD5CzBnN,EoDqFF,SAIEqO,KAAqB3G,GACrB,MAAMkF,EAAOzC,EAAIC,UAEjB,MAAO,KACLiE,KAAiB3G,GACjBkF,EAAK7E,GAAOqF,6BACLQ,KAEX,CAlDUgB,CAA6BP,KAAkB3G,GpD7ChDpN,EAAQC,OAAO9I,EAAuBuO,EAAU,CACrD/N,SAAU,CAAE,IAJV,IACJ+N,CoDgDO,IAEHvD,MACH,CAED,MAAMoS,EAAgBC,MAAyBpH,GAK/C,OAAOhU,EAAYqb,IAAIP,GAAU,KAE/B,MAAMxC,EAAUD,KAEhB,OAAO5Z,EAGLuB,EAAYqV,QAAQnX,GAElByQ,OAAAlQ,OAAAkQ,OAAAlQ,OAAA,CAAA6c,KAAMtb,EAAYqV,SAChB,IAAMrV,EAAYC,qBAEpBiX,IAAKlX,EAAYqV,QAAQzF,IACzB2L,OAAQ9E,EAAI+E,kBAA0BnH,GAAOsF,cAC7C/M,MAAO6J,EAAI+E,kBAAkBnH,GAAOwF,aACpCL,WAAY/C,EAAI+E,kBAA0BnH,GAAOkF,aACjDkC,OAAQzb,EAAYqV,QAAQ7M,IAC5BkT,UAAW,IAAI1H,IACbmH,KAAiBnH,GACnB8F,UAAWxB,EAAQwB,YnCxEzB5C,EmCyEkClX,EAAYqV,QAAQzF,InCvE/C,CACLtG,SAAU,IAAI0K,IACZkD,IAAM5N,YAAY0K,GACpBxK,UAAW,IAAIwK,IACbkD,IAAM1N,aAAawK,GACrBtK,iBAAkB,IACbsK,IACAkD,IAAMxN,oBAAoBsK,GAC/BpK,WAAY,IAAIoK,IACdkD,IAAMtN,cAAcoK,GACtBlK,YAAa,IAAIkK,IACfkD,IAAMpN,eAAekK,GACvBjK,mBAAoB,IACfiK,IACAkD,IAAMnN,sBAAsBiK,GACjChK,UAAW,IAAIgK,IACbkD,IAAMlN,aAAagK,GACrB/J,iBAAkB,IACb+J,IACAkD,IAAMjN,oBAAoB+J,GAC/B7J,YAAa,IAAI6J,IACfkD,IAAM/M,eAAe6J,GACvB5J,mBAAoB,IACf4J,IACAkD,IAAM9M,sBAAsB4J,GACjC1O,UAAW,IAAI0O,IACNkD,IAAM5R,aAAa0O,GAE5BxJ,SAAU,IAAIwJ,IACZkD,IAAM1M,YAAYwJ,GACpBtJ,QAAS,IAAIsJ,IACXkD,IAAMxM,WAAWsJ,GACnBnJ,eAAgB,IACXmJ,IACAkD,IAAMrM,kBAAkBmJ,MmCsCtB0D,OnC3EL,IACJR,CmC4EG,GAEL,CA8CA,SAASkE,MAKJO,GAEH,OAAOld,GACL,IAAIuV,KACF,MAAM9V,EAAQwc,MACRiB,GAGAhH,EAASzW,KAAS8V,GAExB,OAAOrF,OAAOoB,OACZtR,EACE,CACE6c,KAAMpd,EAAMod,MAEd3G,GAE2B,GAG5BhG,OAAAlQ,OAAA,CAAA,EAAAiZ,MAGT,CEvJgB,SAAAkE,GACdC,EACAvP,GAEAhI,EACE2R,EAAW3J,GACX/K,GAAaua,kCCjBX,SACJxP,GAEO1F,EAAQC,OAAO9I,EAAsBuO,EAAU,CACpDyP,cAAc,GAElB,CDcEC,EAAY,KACVH,EAAKvb,SAAQ,CAAC2b,EAAKC,KACjB5P,EAAS2P,EAAKC,EAAM,GACpB,GAEN,CE1BA,MAAMC,GAAwB5a,GAAa6a,uCAqB3BC,KACd,MAAMzH,GrDYuBkC,EqDZMvV,GAAa+a,oBrDazCvd,EAAaY,KAAKmX,GAAKlC,aAD1B,IAAyBkC,EqDV7BxS,EAAUsQ,EAAauH,IAEvB9X,GAASgY,KAAKzH,EAChB"}