{"version":3,"file":"compounds.production.js","sources":["../../src/lib/ruleReturn.ts","../../src/lib/runLazyRule.ts","../../src/rules/equals.ts","../../src/exports/compounds.ts","../../src/plugins/compounds/allOf.ts","../../src/plugins/compounds/anyOf.ts","../../src/plugins/compounds/noneOf.ts","../../src/plugins/compounds/oneOf.ts"],"sourcesContent":["import type { Stringable } from 'vest-utils';\nimport { defaultTo } from 'vest-utils';\n\nexport default function ruleReturn(\n  pass: boolean,\n  message?: string\n): RuleDetailedResult {\n  const output: RuleDetailedResult = { pass };\n\n  if (message) {\n    output.message = message;\n  }\n\n  return output;\n}\n\nexport function failing(): RuleDetailedResult {\n  return ruleReturn(false);\n}\n\nexport function passing(): RuleDetailedResult {\n  return ruleReturn(true);\n}\n\nexport function defaultToFailing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, failing());\n}\n\nexport function defaultToPassing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, passing());\n}\n\nexport type RuleReturn =\n  | boolean\n  | {\n      pass: boolean;\n      message?: Stringable;\n    };\n\nexport type RuleDetailedResult = { pass: boolean; message?: string };\n","import type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\n\nexport default function runLazyRule(\n  lazyRule: LazyRuleRunners,\n  currentValue: any\n): RuleDetailedResult {\n  try {\n    return lazyRule.run(currentValue);\n  } catch {\n    return ruleReturn.failing();\n  }\n}\n","import { bindNot } from 'vest-utils';\n\nexport function equals(value: unknown, arg1: unknown): boolean {\n  return value === arg1;\n}\n\nexport const notEquals = bindNot(equals);\n","import { enforce } from 'n4s';\n\nimport { allOf } from 'allOf';\nimport { anyOf } from 'anyOf';\nimport { EnforceCustomMatcher } from 'enforceUtilityTypes';\nimport { Lazy } from 'genEnforceLazy';\nimport { noneOf } from 'noneOf';\nimport { oneOf } from 'oneOf';\nimport { RuleDetailedResult } from 'ruleReturn';\n\nenforce.extend({ allOf, anyOf, noneOf, oneOf });\n\ntype EnforceCompoundRule = (\n  value: unknown,\n  ...rules: Lazy[]\n) => RuleDetailedResult;\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace n4s {\n    interface EnforceCustomMatchers<R> {\n      allOf: EnforceCustomMatcher<EnforceCompoundRule, R>;\n      anyOf: EnforceCustomMatcher<EnforceCompoundRule, R>;\n      noneOf: EnforceCustomMatcher<EnforceCompoundRule, R>;\n      oneOf: EnforceCustomMatcher<EnforceCompoundRule, R>;\n    }\n  }\n}\n","import { mapFirst } from 'vest-utils';\n\nimport type { Lazy } from 'genEnforceLazy';\nimport * as ruleReturn from 'ruleReturn';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function allOf(value: unknown, ...rules: Lazy[]): RuleDetailedResult {\n  return ruleReturn.defaultToPassing(\n    mapFirst(rules, (rule, breakout) => {\n      const res = runLazyRule(rule, value);\n      breakout(!res.pass, res);\n    })\n  );\n}\n","import { mapFirst } from 'vest-utils';\n\nimport type { Lazy } from 'genEnforceLazy';\nimport * as ruleReturn from 'ruleReturn';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function anyOf(value: unknown, ...rules: Lazy[]): RuleDetailedResult {\n  return ruleReturn.defaultToFailing(\n    mapFirst(rules, (rule, breakout) => {\n      const res = runLazyRule(rule, value);\n      breakout(res.pass, res);\n    })\n  );\n}\n","import { mapFirst } from 'vest-utils';\n\nimport type { Lazy } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function noneOf(value: unknown, ...rules: Lazy[]): RuleDetailedResult {\n  return ruleReturn.defaultToPassing(\n    mapFirst(rules, (rule, breakout) => {\n      const res = runLazyRule(rule, value);\n\n      breakout(res.pass, ruleReturn.failing());\n    })\n  );\n}\n","import { greaterThan } from 'vest-utils';\n\nimport { equals } from 'equals';\nimport type { Lazy } from 'genEnforceLazy';\nimport ruleReturn, { RuleDetailedResult } from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nconst REQUIRED_COUNT = 1;\n\nexport function oneOf(value: unknown, ...rules: Lazy[]): RuleDetailedResult {\n  let passingCount = 0;\n  rules.some(rule => {\n    const res = runLazyRule(rule, value);\n\n    if (res.pass) {\n      passingCount++;\n    }\n\n    if (greaterThan(passingCount, REQUIRED_COUNT)) {\n      return false;\n    }\n  });\n\n  return ruleReturn(equals(passingCount, REQUIRED_COUNT));\n}\n"],"names":["ruleReturn","pass","message","output","failing","defaultToPassing","callback","defaultTo","runLazyRule","lazyRule","currentValue","run","_a","ruleReturn.failing","equals","value","arg1","bindNot","enforce","extend","allOf","rules","ruleReturn.defaultToPassing","mapFirst","rule","breakout","res","anyOf","noneOf","oneOf","passingCount","some","greaterThan"],"mappings":"0DAGc,SAAUA,EACtBC,EACAC,GAEA,MAAMC,EAA6B,CAAEF,QAMrC,OAJIC,IACFC,EAAOD,QAAUA,GAGZC,CACT,UAEgBC,IACd,OAAOJ,GAAW,EACpB,CAYM,SAAUK,EACdC,GAEA,OAAOC,YAAUD,EAZVN,GAAW,GAapB,CC9Bc,SAAUQ,EACtBC,EACAC,GAEA,IACE,OAAOD,EAASE,IAAID,EAGrB,CAFC,MAAME,GACN,OAAOC,GACR,CACH,CCXgB,SAAAC,EAAOC,EAAgBC,GACrC,OAAOD,IAAUC,CACnB,CAEyBC,EAAAA,QAAQH,GCIjCI,EAAAA,QAAQC,OAAO,CAAEC,eCHKL,KAAmBM,GACvC,OAAOC,EACLC,EAAQA,SAACF,GAAO,CAACG,EAAMC,KACrB,MAAMC,EAAMlB,EAAYgB,EAAMT,GAC9BU,GAAUC,EAAIzB,KAAMyB,EAAI,IAG9B,EDJwBC,eEHFZ,KAAmBM,GACvC,OLiBAf,EKhBEiB,EAAQA,SAACF,GAAO,CAACG,EAAMC,KACrB,MAAMC,EAAMlB,EAAYgB,EAAMT,GAC9BU,EAASC,EAAIzB,KAAMyB,EAAI,ILgBpBnB,YAAUD,EAAUF,KAHvB,IACJE,CKXF,EFJ+BsB,gBGHRb,KAAmBM,GACxC,OAAOC,EACLC,EAAQA,SAACF,GAAO,CAACG,EAAMC,KAGrBA,EAFYjB,EAAYgB,EAAMT,GAEjBd,KAAMY,IAAqB,IAG9C,EHLuCgB,eIDjBd,KAAmBM,GACvC,IAAIS,EAAe,EAanB,OAZAT,EAAMU,MAAKP,IAOT,GANYhB,EAAYgB,EAAMT,GAEtBd,MACN6B,IAGEE,EAAWA,YAACF,EAXG,GAYjB,OAAO,CACR,IAGI9B,EAAWc,EAAOgB,EAhBJ,GAiBvB"}