{"version":3,"file":"compose.production.js","sources":["../../src/lib/ruleReturn.ts","../../src/lib/runLazyRule.ts","../../src/exports/compose.ts"],"sourcesContent":["import type { Stringable } from 'vest-utils';\nimport { defaultTo } from 'vest-utils';\n\nexport default function ruleReturn(\n  pass: boolean,\n  message?: string\n): RuleDetailedResult {\n  const output: RuleDetailedResult = { pass };\n\n  if (message) {\n    output.message = message;\n  }\n\n  return output;\n}\n\nexport function failing(): RuleDetailedResult {\n  return ruleReturn(false);\n}\n\nexport function passing(): RuleDetailedResult {\n  return ruleReturn(true);\n}\n\nexport function defaultToFailing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, failing());\n}\n\nexport function defaultToPassing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, passing());\n}\n\nexport type RuleReturn =\n  | boolean\n  | {\n      pass: boolean;\n      message?: Stringable;\n    };\n\nexport type RuleDetailedResult = { pass: boolean; message?: string };\n","import type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\n\nexport default function runLazyRule(\n  lazyRule: LazyRuleRunners,\n  currentValue: any\n): RuleDetailedResult {\n  try {\n    return lazyRule.run(currentValue);\n  } catch {\n    return ruleReturn.failing();\n  }\n}\n","import { ctx } from 'n4s';\nimport { invariant, StringObject, assign, mapFirst } from 'vest-utils';\n\nimport type { ComposeResult, LazyRuleRunners } from 'genEnforceLazy';\nimport { defaultToPassing, RuleDetailedResult } from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\n/* eslint-disable max-lines-per-function */\n\nexport default function compose(\n  ...composites: LazyRuleRunners[]\n): ComposeResult {\n  return assign(\n    (value: any) => {\n      const res = run(value);\n\n      invariant(res.pass, StringObject(res.message));\n    },\n    {\n      run,\n      test: (value: any) => run(value).pass,\n    }\n  );\n\n  function run(value: any): RuleDetailedResult {\n    return ctx.run({ value }, () => {\n      return defaultToPassing(\n        mapFirst(\n          composites,\n          (\n            composite: LazyRuleRunners,\n            breakout: (conditional: boolean, res: RuleDetailedResult) => void\n          ) => {\n            /* HACK: Just a small white lie. ~~HELP WANTED~~.\n               The ideal is that instead of `LazyRuleRunners` We would simply use `Lazy` to begin with.\n               The problem is that lazy rules can't really be passed to this function due to some generic hell\n               so we're limiting it to a small set of functions.\n            */\n\n            const res = runLazyRule(composite, value);\n\n            breakout(!res.pass, res);\n          }\n        )\n      );\n    });\n  }\n}\n"],"names":["ruleReturn","pass","message","output","defaultToPassing","callback","defaultTo","runLazyRule","lazyRule","currentValue","run","_a","composites","assign","value","res","invariant","StringObject","test","ctx","mapFirst","composite","breakout"],"mappings":"0DAGc,SAAUA,EACtBC,EACAC,GAEA,MAAMC,EAA6B,CAAEF,QAMrC,OAJIC,IACFC,EAAOD,QAAUA,GAGZC,CACT,CAgBM,SAAUC,EACdC,GAEA,OAAOC,YAAUD,EAZVL,GAAW,GAapB,CC9Bc,SAAUO,EACtBC,EACAC,GAEA,IACE,OAAOD,EAASE,IAAID,EAGrB,CAFC,MAAME,GACN,ODMKX,GAAW,ECLjB,CACH,gBCJc,YACTY,GAEH,OAAOC,EAAAA,QACJC,IACC,MAAMC,EAAML,EAAII,GAEhBE,EAASA,UAACD,EAAId,KAAMgB,EAAYA,aAACF,EAAIb,SAAS,GAEhD,CACEQ,MACAQ,KAAOJ,GAAeJ,EAAII,GAAOb,OAIrC,SAASS,EAAII,GACX,OAAOK,MAAIT,IAAI,CAAEI,UAAS,IACjBV,EACLgB,EAAQA,SACNR,GACA,CACES,EACAC,KAQA,MAAMP,EAAMR,EAAYc,EAAWP,GAEnCQ,GAAUP,EAAId,KAAMc,EAAI,MAKjC,CACH"}