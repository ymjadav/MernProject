{"version":3,"file":"schema.production.js","sources":["../../src/lib/ruleReturn.ts","../../src/lib/runLazyRule.ts","../../src/plugins/schema/loose.ts","../../src/exports/schema.ts","../../src/plugins/schema/isArrayOf.ts","../../src/plugins/schema/optional.ts","../../src/plugins/schema/shape.ts","../../src/plugins/schema/partial.ts"],"sourcesContent":["import type { Stringable } from 'vest-utils';\nimport { defaultTo } from 'vest-utils';\n\nexport default function ruleReturn(\n  pass: boolean,\n  message?: string\n): RuleDetailedResult {\n  const output: RuleDetailedResult = { pass };\n\n  if (message) {\n    output.message = message;\n  }\n\n  return output;\n}\n\nexport function failing(): RuleDetailedResult {\n  return ruleReturn(false);\n}\n\nexport function passing(): RuleDetailedResult {\n  return ruleReturn(true);\n}\n\nexport function defaultToFailing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, failing());\n}\n\nexport function defaultToPassing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, passing());\n}\n\nexport type RuleReturn =\n  | boolean\n  | {\n      pass: boolean;\n      message?: Stringable;\n    };\n\nexport type RuleDetailedResult = { pass: boolean; message?: string };\n","import type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\n\nexport default function runLazyRule(\n  lazyRule: LazyRuleRunners,\n  currentValue: any\n): RuleDetailedResult {\n  try {\n    return lazyRule.run(currentValue);\n  } catch {\n    return ruleReturn.failing();\n  }\n}\n","import { ctx } from 'n4s';\n\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\nimport type { ShapeObject } from 'schemaTypes';\n\nexport function loose(\n  inputObject: Record<string, any>,\n  shapeObject: ShapeObject\n): RuleDetailedResult {\n  for (const key in shapeObject) {\n    const currentValue = inputObject[key];\n    const currentRule = shapeObject[key];\n\n    const res = ctx.run({ value: currentValue, set: true, meta: { key } }, () =>\n      runLazyRule(currentRule, currentValue)\n    );\n\n    if (!res.pass) {\n      return res;\n    }\n  }\n\n  return ruleReturn.passing();\n}\n","import { enforce } from 'n4s';\n\n\nimport { EnforceCustomMatcher } from 'enforceUtilityTypes';\nimport { isArrayOf } from 'isArrayOf';\nimport { loose } from 'loose';\nimport { optional } from 'optional';\nimport { shape } from 'shape';\n\nexport { partial } from 'partial';\n\nenforce.extend({ isArrayOf, loose, optional, shape });\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace n4s {\n    interface EnforceCustomMatchers<R> {\n      isArrayOf: EnforceCustomMatcher<typeof isArrayOf, R>;\n      loose: EnforceCustomMatcher<typeof loose, R>;\n      shape: EnforceCustomMatcher<typeof shape, R>;\n      optional: EnforceCustomMatcher<typeof optional, R>;\n    }\n  }\n}\n","import { ctx } from 'n4s';\nimport { mapFirst } from 'vest-utils';\n\nimport type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function isArrayOf(\n  inputArray: any[],\n  currentRule: LazyRuleRunners\n): RuleDetailedResult {\n  return ruleReturn.defaultToPassing(\n    mapFirst(inputArray, (currentValue, breakout, index) => {\n      const res = ctx.run(\n        { value: currentValue, set: true, meta: { index } },\n        () => runLazyRule(currentRule, currentValue)\n      );\n\n      breakout(!res.pass, res);\n    })\n  );\n}\n","import { isNullish } from 'vest-utils';\n\nimport type { Lazy } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function optional(value: any, ruleChain: Lazy): RuleDetailedResult {\n  if (isNullish(value)) {\n    return ruleReturn.passing();\n  }\n  return runLazyRule(ruleChain, value);\n}\n","import { hasOwnProperty } from 'vest-utils';\n\nimport { loose } from 'loose';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport type { ShapeObject } from 'schemaTypes';\n\nexport function shape(\n  inputObject: Record<string, any>,\n  shapeObject: ShapeObject\n): RuleDetailedResult {\n  const baseRes = loose(inputObject, shapeObject);\n  if (!baseRes.pass) {\n    return baseRes;\n  }\n  for (const key in inputObject) {\n    if (!hasOwnProperty(shapeObject, key)) {\n      return ruleReturn.failing();\n    }\n  }\n\n  return ruleReturn.passing();\n}\n","import { enforce } from 'n4s';\n\n// Help needed improving the typings of this file.\n// Ideally, we'd be able to extend ShapeObject, but that's not possible.\nexport function partial<T extends Record<any, any>>(shapeObject: T): T {\n  const output = {} as T;\n  for (const key in shapeObject) {\n    output[key] = enforce.optional(shapeObject[key]) as T[Extract<\n      keyof T,\n      string\n    >];\n  }\n  return output;\n}\n"],"names":["ruleReturn","pass","message","output","failing","passing","runLazyRule","lazyRule","currentValue","run","_a","ruleReturn.failing","loose","inputObject","shapeObject","key","currentRule","res","ctx","value","set","meta","ruleReturn.passing","enforce","extend","isArrayOf","inputArray","callback","mapFirst","breakout","index","defaultTo","optional","ruleChain","isNullish","shape","baseRes","hasOwnProperty"],"mappings":"gUAGc,SAAUA,EACtBC,EACAC,GAEA,MAAMC,EAA6B,CAAEF,QAMrC,OAJIC,IACFC,EAAOD,QAAUA,GAGZC,CACT,UAEgBC,IACd,OAAOJ,GAAW,EACpB,UAEgBK,IACd,OAAOL,GAAW,EACpB,CClBc,SAAUM,EACtBC,EACAC,GAEA,IACE,OAAOD,EAASE,IAAID,EAGrB,CAFC,MAAME,GACN,OAAOC,GACR,CACH,CCNgB,SAAAC,EACdC,EACAC,GAEA,IAAK,MAAMC,KAAOD,EAAa,CAC7B,MAAMN,EAAeK,EAAYE,GAC3BC,EAAcF,EAAYC,GAE1BE,EAAMC,EAAAA,IAAIT,IAAI,CAAEU,MAAOX,EAAcY,KAAK,EAAMC,KAAM,CAAEN,SAAS,IACrET,EAAYU,EAAaR,KAG3B,IAAKS,EAAIhB,KACP,OAAOgB,CAEV,CAED,OAAOK,GACT,CCdAC,EAAAA,QAAQC,OAAO,CAAEC,UCHD,SACdC,EACAV,GAEA,OJmBAW,EIlBEC,EAAAA,SAASF,GAAY,CAAClB,EAAcqB,EAAUC,KAC5C,MAAMb,EAAMC,EAAAA,IAAIT,IACd,CAAEU,MAAOX,EAAcY,KAAK,EAAMC,KAAM,CAAES,WAC1C,IAAMxB,EAAYU,EAAaR,KAGjCqB,GAAUZ,EAAIhB,KAAMgB,EAAI,IJcrBc,YAAUJ,EAAUtB,KAHvB,IACJsB,CITF,EDX4Bf,QAAOoB,SEJnB,SAASb,EAAYc,GACnC,OAAIC,EAAAA,UAAUf,GACLG,IAEFhB,EAAY2B,EAAWd,EAChC,EFD6CgB,MGJ7B,SACdtB,EACAC,GAEA,MAAMsB,EAAUxB,EAAMC,EAAaC,GACnC,IAAKsB,EAAQnC,KACX,OAAOmC,EAET,IAAK,MAAMrB,KAAOF,EAChB,IAAKwB,EAAcA,eAACvB,EAAaC,GAC/B,OAAOJ,IAIX,OAAOW,GACT,cClBM,SAA8CR,GAClD,MAAMX,EAAS,CAAA,EACf,IAAK,MAAMY,KAAOD,EAChBX,EAAOY,GAAOQ,EAAOA,QAACS,SAASlB,EAAYC,IAK7C,OAAOZ,CACT"}