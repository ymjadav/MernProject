{"version":3,"file":"compose.development.js","sources":["../../src/lib/ruleReturn.ts","../../src/lib/runLazyRule.ts","../../src/exports/compose.ts"],"sourcesContent":["import type { Stringable } from 'vest-utils';\nimport { defaultTo } from 'vest-utils';\n\nexport default function ruleReturn(\n  pass: boolean,\n  message?: string\n): RuleDetailedResult {\n  const output: RuleDetailedResult = { pass };\n\n  if (message) {\n    output.message = message;\n  }\n\n  return output;\n}\n\nexport function failing(): RuleDetailedResult {\n  return ruleReturn(false);\n}\n\nexport function passing(): RuleDetailedResult {\n  return ruleReturn(true);\n}\n\nexport function defaultToFailing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, failing());\n}\n\nexport function defaultToPassing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, passing());\n}\n\nexport type RuleReturn =\n  | boolean\n  | {\n      pass: boolean;\n      message?: Stringable;\n    };\n\nexport type RuleDetailedResult = { pass: boolean; message?: string };\n","import type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\n\nexport default function runLazyRule(\n  lazyRule: LazyRuleRunners,\n  currentValue: any\n): RuleDetailedResult {\n  try {\n    return lazyRule.run(currentValue);\n  } catch {\n    return ruleReturn.failing();\n  }\n}\n","import { ctx } from 'n4s';\nimport { invariant, StringObject, assign, mapFirst } from 'vest-utils';\n\nimport type { ComposeResult, LazyRuleRunners } from 'genEnforceLazy';\nimport { defaultToPassing, RuleDetailedResult } from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\n/* eslint-disable max-lines-per-function */\n\nexport default function compose(\n  ...composites: LazyRuleRunners[]\n): ComposeResult {\n  return assign(\n    (value: any) => {\n      const res = run(value);\n\n      invariant(res.pass, StringObject(res.message));\n    },\n    {\n      run,\n      test: (value: any) => run(value).pass,\n    }\n  );\n\n  function run(value: any): RuleDetailedResult {\n    return ctx.run({ value }, () => {\n      return defaultToPassing(\n        mapFirst(\n          composites,\n          (\n            composite: LazyRuleRunners,\n            breakout: (conditional: boolean, res: RuleDetailedResult) => void\n          ) => {\n            /* HACK: Just a small white lie. ~~HELP WANTED~~.\n               The ideal is that instead of `LazyRuleRunners` We would simply use `Lazy` to begin with.\n               The problem is that lazy rules can't really be passed to this function due to some generic hell\n               so we're limiting it to a small set of functions.\n            */\n\n            const res = runLazyRule(composite, value);\n\n            breakout(!res.pass, res);\n          }\n        )\n      );\n    });\n  }\n}\n"],"names":["defaultTo","ruleReturn.failing","assign","invariant","StringObject","ctx","mapFirst"],"mappings":";;;;;;EAGc,SAAU,UAAU,CAChC,IAAa,EACb,OAAgB,EAAA;EAEhB,IAAA,MAAM,MAAM,GAAuB,EAAE,IAAI,EAAE,CAAC;EAE5C,IAAA,IAAI,OAAO,EAAE;EACX,QAAA,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;EAC1B,KAAA;EAED,IAAA,OAAO,MAAM,CAAC;EAChB,CAAC;WAEe,OAAO,GAAA;EACrB,IAAA,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;EAC3B,CAAC;WAEe,OAAO,GAAA;EACrB,IAAA,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;EAC1B,CAAC;EAQK,SAAU,gBAAgB,CAC9B,QAAgD,EAAA;EAEhD,IAAA,OAAOA,mBAAS,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;EACxC;;EC9Bc,SAAU,WAAW,CACjC,QAAyB,EACzB,YAAiB,EAAA;MAEjB,IAAI;EACF,QAAA,OAAO,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;EACnC,KAAA;MAAC,OAAM,EAAA,EAAA;EACN,QAAA,OAAOC,OAAkB,EAAE,CAAC;EAC7B,KAAA;EACH;;ECNA;EAEc,SAAU,OAAO,CAC7B,GAAG,UAA6B,EAAA;EAEhC,IAAA,OAAOC,gBAAM,CACX,CAAC,KAAU,KAAI;EACb,QAAA,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC;EAEvB,QAAAC,mBAAS,CAAC,GAAG,CAAC,IAAI,EAAEC,sBAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;EACjD,KAAC,EACD;UACE,GAAG;UACH,IAAI,EAAE,CAAC,KAAU,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI;EACtC,KAAA,CACF,CAAC;MAEF,SAAS,GAAG,CAAC,KAAU,EAAA;UACrB,OAAOC,OAAG,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,MAAK;cAC7B,OAAO,gBAAgB,CACrBC,kBAAQ,CACN,UAAU,EACV,CACE,SAA0B,EAC1B,QAAiE,KAC/D;EACF;;;;EAIE;kBAEF,MAAM,GAAG,GAAG,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;kBAE1C,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;eAC1B,CACF,CACF,CAAC;EACJ,SAAC,CAAC,CAAC;OACJ;EACH;;;;;;;;"}