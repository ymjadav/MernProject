import { ctx } from 'n4s';
import { defaultTo, assign, invariant, StringObject, mapFirst } from 'vest-utils';

function ruleReturn(pass, message) {
    const output = { pass };
    if (message) {
        output.message = message;
    }
    return output;
}
function failing() {
    return ruleReturn(false);
}
function passing() {
    return ruleReturn(true);
}
function defaultToPassing(callback) {
    return defaultTo(callback, passing());
}

function runLazyRule(lazyRule, currentValue) {
    try {
        return lazyRule.run(currentValue);
    }
    catch (_a) {
        return failing();
    }
}

/* eslint-disable max-lines-per-function */
function compose(...composites) {
    return assign((value) => {
        const res = run(value);
        invariant(res.pass, StringObject(res.message));
    }, {
        run,
        test: (value) => run(value).pass,
    });
    function run(value) {
        return ctx.run({ value }, () => {
            return defaultToPassing(mapFirst(composites, (composite, breakout) => {
                /* HACK: Just a small white lie. ~~HELP WANTED~~.
                   The ideal is that instead of `LazyRuleRunners` We would simply use `Lazy` to begin with.
                   The problem is that lazy rules can't really be passed to this function due to some generic hell
                   so we're limiting it to a small set of functions.
                */
                const res = runLazyRule(composite, value);
                breakout(!res.pass, res);
            }));
        });
    }
}

export { compose as default };
//# sourceMappingURL=compose.development.js.map
