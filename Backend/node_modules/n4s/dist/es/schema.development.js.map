{"version":3,"file":"schema.development.js","sources":["../../src/lib/ruleReturn.ts","../../src/lib/runLazyRule.ts","../../src/plugins/schema/isArrayOf.ts","../../src/plugins/schema/loose.ts","../../src/plugins/schema/optional.ts","../../src/plugins/schema/shape.ts","../../src/plugins/schema/partial.ts","../../src/exports/schema.ts"],"sourcesContent":["import type { Stringable } from 'vest-utils';\nimport { defaultTo } from 'vest-utils';\n\nexport default function ruleReturn(\n  pass: boolean,\n  message?: string\n): RuleDetailedResult {\n  const output: RuleDetailedResult = { pass };\n\n  if (message) {\n    output.message = message;\n  }\n\n  return output;\n}\n\nexport function failing(): RuleDetailedResult {\n  return ruleReturn(false);\n}\n\nexport function passing(): RuleDetailedResult {\n  return ruleReturn(true);\n}\n\nexport function defaultToFailing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, failing());\n}\n\nexport function defaultToPassing(\n  callback: (...args: any[]) => RuleDetailedResult\n): RuleDetailedResult {\n  return defaultTo(callback, passing());\n}\n\nexport type RuleReturn =\n  | boolean\n  | {\n      pass: boolean;\n      message?: Stringable;\n    };\n\nexport type RuleDetailedResult = { pass: boolean; message?: string };\n","import type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\n\nexport default function runLazyRule(\n  lazyRule: LazyRuleRunners,\n  currentValue: any\n): RuleDetailedResult {\n  try {\n    return lazyRule.run(currentValue);\n  } catch {\n    return ruleReturn.failing();\n  }\n}\n","import { ctx } from 'n4s';\nimport { mapFirst } from 'vest-utils';\n\nimport type { LazyRuleRunners } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function isArrayOf(\n  inputArray: any[],\n  currentRule: LazyRuleRunners\n): RuleDetailedResult {\n  return ruleReturn.defaultToPassing(\n    mapFirst(inputArray, (currentValue, breakout, index) => {\n      const res = ctx.run(\n        { value: currentValue, set: true, meta: { index } },\n        () => runLazyRule(currentRule, currentValue)\n      );\n\n      breakout(!res.pass, res);\n    })\n  );\n}\n","import { ctx } from 'n4s';\n\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\nimport type { ShapeObject } from 'schemaTypes';\n\nexport function loose(\n  inputObject: Record<string, any>,\n  shapeObject: ShapeObject\n): RuleDetailedResult {\n  for (const key in shapeObject) {\n    const currentValue = inputObject[key];\n    const currentRule = shapeObject[key];\n\n    const res = ctx.run({ value: currentValue, set: true, meta: { key } }, () =>\n      runLazyRule(currentRule, currentValue)\n    );\n\n    if (!res.pass) {\n      return res;\n    }\n  }\n\n  return ruleReturn.passing();\n}\n","import { isNullish } from 'vest-utils';\n\nimport type { Lazy } from 'genEnforceLazy';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport runLazyRule from 'runLazyRule';\n\nexport function optional(value: any, ruleChain: Lazy): RuleDetailedResult {\n  if (isNullish(value)) {\n    return ruleReturn.passing();\n  }\n  return runLazyRule(ruleChain, value);\n}\n","import { hasOwnProperty } from 'vest-utils';\n\nimport { loose } from 'loose';\nimport type { RuleDetailedResult } from 'ruleReturn';\nimport * as ruleReturn from 'ruleReturn';\nimport type { ShapeObject } from 'schemaTypes';\n\nexport function shape(\n  inputObject: Record<string, any>,\n  shapeObject: ShapeObject\n): RuleDetailedResult {\n  const baseRes = loose(inputObject, shapeObject);\n  if (!baseRes.pass) {\n    return baseRes;\n  }\n  for (const key in inputObject) {\n    if (!hasOwnProperty(shapeObject, key)) {\n      return ruleReturn.failing();\n    }\n  }\n\n  return ruleReturn.passing();\n}\n","import { enforce } from 'n4s';\n\n// Help needed improving the typings of this file.\n// Ideally, we'd be able to extend ShapeObject, but that's not possible.\nexport function partial<T extends Record<any, any>>(shapeObject: T): T {\n  const output = {} as T;\n  for (const key in shapeObject) {\n    output[key] = enforce.optional(shapeObject[key]) as T[Extract<\n      keyof T,\n      string\n    >];\n  }\n  return output;\n}\n","import { enforce } from 'n4s';\n\n\nimport { EnforceCustomMatcher } from 'enforceUtilityTypes';\nimport { isArrayOf } from 'isArrayOf';\nimport { loose } from 'loose';\nimport { optional } from 'optional';\nimport { shape } from 'shape';\n\nexport { partial } from 'partial';\n\nenforce.extend({ isArrayOf, loose, optional, shape });\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  namespace n4s {\n    interface EnforceCustomMatchers<R> {\n      isArrayOf: EnforceCustomMatcher<typeof isArrayOf, R>;\n      loose: EnforceCustomMatcher<typeof loose, R>;\n      shape: EnforceCustomMatcher<typeof shape, R>;\n      optional: EnforceCustomMatcher<typeof optional, R>;\n    }\n  }\n}\n"],"names":["ruleReturn.failing","ruleReturn.defaultToPassing","ruleReturn.passing"],"mappings":"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"}